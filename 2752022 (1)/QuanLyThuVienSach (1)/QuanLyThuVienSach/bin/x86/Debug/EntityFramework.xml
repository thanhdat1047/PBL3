<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework</name>
    </assembly>
    <members>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
            <summary>
            Represents a result mapping for a function import.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
            <summary>
            Base class for items in the mapping space (DataSpace.CSSpace)
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
            <summary>
            Adds a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
            <summary>
            Removes a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
            <summary>
            Gets the type mappings.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
            <summary>
            Specifies a mapping condition evaluated by checking whether the value 
            of the a property/column is null or not null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
            <summary>
            Mapping metadata for Conditional property mapping on a type.
            Condition Property Mapping specifies a Condition either on the C side property or S side property.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ConditionProperyMap ( constant value-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --ConditionProperyMap ( constant value-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the condition property map elements in the
            above example.
            </example>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
            <summary>
            Mapping metadata for all types of property mappings.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all property map elements in the
            above example. This includes the scalar property maps, complex property maps
            and end property maps.
            </example>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
            <summary>
            Gets an EdmProperty that specifies the mapped property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
            <summary>
            Gets an EdmProperty that specifies the mapped property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
            <summary>
            Gets an EdmProperty that specifies the mapped column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
            <summary>
            Creates an IsNullConditionMapping instance.
            </summary>
            <param name="propertyOrColumn">An EdmProperty that specifies a property or column.</param>
            <param name="isNull">A boolean that indicates whether to perform a null or a not-null check.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
            <summary>
            Gets a bool that specifies whether the condition is evaluated by performing a null check
            or a not-null check.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
            <summary>
            Specifies a mapping condition evaluated by comparing the value of 
            a property or column with a given value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
            <summary>
            Creates a ValueConditionMapping instance.
            </summary>
            <param name="propertyOrColumn">An EdmProperty that specifies a property or column.</param>
            <param name="value">An object that specifies the value to compare with.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
            <summary>
            Gets an object that specifies the value to check against.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
            <summary>
            Serializes an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> that conforms to the restrictions of a single
            CSDL schema file to an XML writer. The model to be serialized must contain a single
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer"/> .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the XmlWriter.
            </summary>
            <param name="model">
            The EdmModel to serialize.
            </param>
            <param name="xmlWriter"> The XmlWriter to serialize to. </param>
            <param name="modelNamespace">The serialized model's namespace.</param>
            <returns>true if the model is valid; otherwise, false.</returns>
        </member>
        <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
            <summary>
            Occurs when an error is encountered serializing the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
            <summary>
            Information about an error that occurred processing an Entity Framework model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
            <summary>
            Gets an optional value indicating which property of the source item caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
            <summary>
            Gets an optional descriptive message the describes the error that is being raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
            <summary>
            Gets a value indicating the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem"/> that caused the event to be raised.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
            <summary>
            Contains additional attributes and properties of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/>
            </summary>
            <remarks>
            Note that <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload"/> objects are short lived and exist only to
            make <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> initialization easier. Instance of this type are not
            compared to each other and arrays returned by array properties are copied to internal
            collections in the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> ctor. Therefore it is fine to suppress the
            Code Analysis messages.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
            <summary>Gets or sets the function schema.</summary>
            <returns>The function schema.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
            <summary>Gets or sets the store function name.</summary>
            <returns>The store function name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
            <summary>Gets or sets the command text associated with the function.</summary>
            <returns>The command text associated with the function.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
            <summary>Gets or sets the entity sets for the function.</summary>
            <returns>The entity sets for the function.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
            <summary>Gets a value that indicates whether this is an aggregate function.</summary>
            <returns>true if this is an aggregate function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
            <summary>Gets or sets whether this function is a built-in function.</summary>
            <returns>true if this function is a built-in function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
            <summary>Gets or sets whether the function contains no arguments.</summary>
            <returns>true if the function contains no arguments; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
            <summary>Gets or sets whether this function can be composed.</summary>
            <returns>true if this function can be composed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
            <summary>Gets or sets whether this function is from a provider manifest.</summary>
            <returns>true if this function is from a provider manifest; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
            <summary>Gets or sets whether this function is a cached store function.</summary>
            <returns>true if this function is a cached store function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
            <summary>Gets or sets whether this function is a function import.</summary>
            <returns>true if this function is a function import; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
            <summary>Gets or sets the return parameters.</summary>
            <returns>The return parameters.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
            <summary>Gets or sets the parameter type semantics.</summary>
            <returns>The parameter type semantics.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
            <summary>Gets or sets the function parameters.</summary>
            <returns>The function parameters.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
            <summary>
            Serializes the storage (database) section of an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to XML.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase"> The EdmModel to serialize </param>
            <param name="provider"> Provider information on the Schema element </param>
            <param name="providerManifestToken"> ProviderManifestToken information on the Schema element </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
            <param name="serializeDefaultNullability">A value indicating whether to serialize Nullable attributes when they are set to the default value.</param>
            <returns> true if model can be serialized, otherwise false </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase"> The EdmModel to serialize </param>
            <param name="namespaceName"> Namespace name on the Schema element </param>
            <param name="provider"> Provider information on the Schema element </param>
            <param name="providerManifestToken"> ProviderManifestToken information on the Schema element </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
            <param name="serializeDefaultNullability">A value indicating whether to serialize Nullable attributes when they are set to the default value.</param>
            <returns> true if model can be serialized, otherwise false </returns>
        </member>
        <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
            <summary>
            Occurs when an error is encountered serializing the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
            <summary> Visits each element of an expression tree from a given root expression. If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
            <summary>Defines the basic functionality that should be implemented by visitors that return a result value of a specific type. </summary>
            <typeparam name="TResultType">The type of the result produced by the visitor.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern method for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Typed visitor pattern method for DbInExpression.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
            <returns> An instance of TResultType. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />
            class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Replaces an old expression with a new one for the expression visitor.</summary>
            <param name="oldExpression">The old expression.</param>
            <param name="newExpression">The new expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>Represents an event when the variable is rebound for the expression visitor.</summary>
            <param name="fromVarRef">The location of the variable.</param>
            <param name="toVarRef">The reference of the variable where it is rebounded.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>Represents an event when entering the scope for the expression visitor with specified scope variables.</summary>
            <param name="scopeVariables">The collection of scope variables.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
            <summary>Exits the scope for the expression visitor.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Implements the visitor pattern for the expression.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>Implements the visitor pattern for the expression list.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="list">The expression list.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>Implements the visitor pattern for expression binding.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="binding">The expression binding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
            <summary>Implements the visitor pattern for the expression binding list.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="list">The expression binding list.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>Implements the visitor pattern for the group expression binding.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
            <summary>Implements the visitor pattern for the sort clause.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="clause">The sort clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
            <summary>Implements the visitor pattern for the sort order.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
            <summary>Implements the visitor pattern for the aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
            <summary>Implements the visitor pattern for the function aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
            <summary>Implements the visitor pattern for the group aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>Implements the visitor pattern for the Lambda function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="lambda">The lambda function.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Implements the visitor pattern for the type.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>Implements the visitor pattern for the type usage.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>Implements the visitor pattern for the entity set.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="entitySet">The entity set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>Implements the visitor pattern for the function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="functionMetadata">The function metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Implements the visitor pattern for the basic functionality required by expression types.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>Implements the visitor pattern for the different kinds of constants.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The constant expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>Implements the visitor pattern for a reference to a typed null literal.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>Implements the visitor pattern for a reference to a variable that is currently in scope.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>Implements the visitor pattern for a reference to a parameter declared on the command tree that contains this expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>Implements the visitor pattern for an invocation of a function.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The function expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>Implements the visitor pattern for the application of a lambda function to arguments represented by DbExpression objects.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>Implements the visitor pattern for retrieving an instance property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>Implements the visitor pattern for the comparison operation applied to two arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The cast expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>Implements the visitor pattern for a string comparison against the specified pattern with an optional escape string.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>Implements the visitor pattern for the restriction of the number of elements in the argument collection to the specified limit value.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>Implements the visitor pattern for the null determination applied to a single argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>Implements the visitor pattern for the arithmetic operation applied to numeric arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The arithmetic expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>Implements the visitor pattern for the logical AND expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The logical AND expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>Implements the visitor pattern for the logical OR of two Boolean arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>Implements the visitor pattern for the DbInExpression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The DbInExpression that is being visited.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>Implements the visitor pattern for the logical NOT of a single Boolean argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>Implements the visitor pattern for the removed duplicate elements from the specified set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The distinct expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>Implements the visitor pattern for the conversion of the specified set argument to a singleton the conversion of the specified set argument to a singleton.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The element expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>Implements the visitor pattern for an empty set determination applied to a single set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>Implements the visitor pattern for the set union operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>Implements the visitor pattern for the set intersection operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>Implements the visitor pattern for the set subtraction operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>Implements the visitor pattern for a type conversion operation applied to a polymorphic argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>Implements the visitor pattern for the type comparison of a single argument against the specified type.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>Implements the visitor pattern for the type conversion of a single argument to the specified type.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The cast expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>Implements the visitor pattern for the When, Then, and Else clauses.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The case expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>Implements the visitor pattern for the retrieval of elements of the specified type from the given set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>Implements the visitor pattern for the construction of a new instance of a given type, including set and record types.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>Implements the visitor pattern for a strongly typed reference to a specific instance within an entity set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>Implements the visitor pattern for the navigation of a relationship.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>Implements the visitor pattern for the expression that retrieves an entity based on the specified reference.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The DEREF expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>Implements the visitor pattern for the retrieval of the key value from the underlying reference value.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>Implements the visitor pattern for the expression that extracts a reference from the underlying entity instance.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The entity reference expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>Implements the visitor pattern for a scan over an entity set or relationship set, as indicated by the Target property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>Implements the visitor pattern for a predicate applied to filter an input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The filter expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>Implements the visitor pattern for the projection of a given input set over the specified expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>Implements the visitor pattern for the unconditional join operation between the given collection arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The join expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>Implements the visitor pattern for an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>Implements the visitor pattern for the invocation of the specified function for each element in the specified input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The APPLY expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>Implements the visitor pattern for a group by operation.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>Implements the visitor pattern for the skip expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>Implements the visitor pattern for a sort key that can be used as part of the sort order.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>Implements the visitor pattern for a quantifier operation of the specified kind over the elements of the specified input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
            <summary>
            When this attribute is placed on a property it indicates that the database column to which the
            property is mapped has an index.
            </summary>
            <remarks>
            This attribute is used by Entity Framework Migrations to create indexes on mapped database columns.
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index that will be named by convention and
            has no column order, clustering, or uniqueness specified.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and
            has no column order, clustering, or uniqueness specified.
            </summary>
            <param name="name">The index name.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and column order, 
            but with no clustering or uniqueness specified.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
            <param name="name">The index name.</param>
            <param name="order">A number which will be used to determine column ordering for multi-column indexes.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            </summary>
            <param name="other">The attribute to compare.</param>
            <returns>True if the other object is equal to this object; otherwise false.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            </summary>
            <param name="obj">The attribute to compare.</param>
            <returns>True if the other object is equal to this object; otherwise false.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
            <summary>
            The index name.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
            <summary>
            A number which will be used to determine column ordering for multi-column indexes. This will be -1 if no
            column order has been specified.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
            <summary>
            Set this property to true to define a clustered index. Set this property to false to define a 
            non-clustered index.
            </summary>
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns true.
            If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns false, then the value of this property is meaningless.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered"/> has been set to a value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
            <summary>
            Set this property to true to define a unique index. Set this property to false to define a 
            non-unique index.
            </summary>
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns true.
            If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns false, then the value of this property is meaningless.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique"/> has been set to a value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
            <summary>
            Returns a different ID for each object instance such that type descriptors won't
            attempt to combine all IndexAttribute instances into a single instance.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbConfiguration">
            <summary>
            A class derived from this class can be placed in the same assembly as a class derived from
            <see cref="T:System.Data.Entity.DbContext"/> to define Entity Framework configuration for an application.
            Configuration is set by calling protected methods and setting protected properties of this
            class in the constructor of your derived type.
            The type to use can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.#ctor">
            <summary>
            Any class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> must have a public parameterless constructor
            and that constructor should call this constructor.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
            <summary>
            The Singleton instance of <see cref="T:System.Data.Entity.DbConfiguration"/> for this app domain. This can be
            set at application start before any Entity Framework features have been used and afterwards
            should be treated as read-only.
            </summary>
            <param name="configuration">The instance of <see cref="T:System.Data.Entity.DbConfiguration"/>.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
            <summary>
            Attempts to discover and load the <see cref="T:System.Data.Entity.DbConfiguration"/> associated with the given
            <see cref="T:System.Data.Entity.DbContext"/> type. This method is intended to be used by tooling to ensure that
            the correct configuration is loaded into the app domain. Tooling should use this method
            before accessing the <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver"/> property.
            </summary>
            <param name="contextType">A <see cref="T:System.Data.Entity.DbContext"/> type to use for configuration discovery.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
            <summary>
            Attempts to discover and load the <see cref="T:System.Data.Entity.DbConfiguration"/> from the given assembly.
            This method is intended to be used by tooling to ensure that the correct configuration is loaded into
            the app domain. Tooling should use this method before accessing the <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver"/>
            property. If the tooling knows the <see cref="T:System.Data.Entity.DbContext"/> type being used, then the
            <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)"/> method should be used since it gives a greater chance that
            the correct configuration will be found.
            </summary>
            <param name="assemblyHint">An <see cref="T:System.Reflection.Assembly"/> to use for configuration discovery.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility of resolvers that
            are used to resolve dependencies needed by the Entity Framework.
            </summary>
            <remarks>
            Resolvers are asked to resolve dependencies in reverse order from which they are added. This means
            that a resolver can be added to override resolution of a dependency that would already have been
            resolved in a different way.
            The exceptions to this is that any dependency registered in the application's config file
            will always be used in preference to using a dependency resolver added here.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility of resolvers that
            are used to resolve dependencies needed by the Entity Framework. Unlike the AddDependencyResolver
            method, this method puts the resolver at the bottom of the Chain of Responsibility such that it will only
            be used to resolve a dependency that could not be resolved by any of the other resolvers.
            </summary>
            <remarks>
            A <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> implementation is automatically registered as a default resolver
            when it is added with a call to <see cref="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)"/>. This allows EF providers to act as
            resolvers for other services that may need to be overridden by the provider.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            an Entity Framework provider.
            </summary>
            <remarks>
            Note that the provider is both registered as a service itself and also registered as a default resolver with
            a call to AddDefaultResolver.  This allows EF providers to act as resolvers for other services that
            may need to be overridden by the provider.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> and also using AddDefaultResolver to add the provider as a default
            resolver. This means that, if desired, the same functionality can be achieved using a custom resolver or a
            resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="provider"> The provider instance. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            an ADO.NET provider.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolvers for
            <see cref="T:System.Data.Common.DbProviderFactory"/> and <see cref="T:System.Data.Entity.Infrastructure.IProviderInvariantName"/>. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="providerFactory"> The provider instance. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register an
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used. </param>
            <param name="getExecutionStrategy"> A function that returns a new instance of an execution strategy. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register an
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> for use with the provider represented by the given invariant name and
            for a given server name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
            <param name="getExecutionStrategy"> A function that returns a new instance of an execution strategy. </param>
            <param name="serverName"> A string that will be matched against the server name in the connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this transaction handler will be used.
            </param>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> for use with the provider represented by the given invariant name and
            for a given server name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this transaction handler will be used.
            </param>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
            <param name="serverName"> A string that will be matched against the server name in the connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
            <summary>
            Sets the <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/> that is used to create connections by convention if no other
            connection string or connection is given to or can be discovered by <see cref="T:System.Data.Entity.DbContext"/>.
            Note that a default connection factory is set in the app.config or web.config file whenever the
            EntityFramework NuGet package is installed. As for all config file settings, the default connection factory
            set in the config file will take precedence over any setting made with this method. Therefore the setting
            must be removed from the config file before calling this method will have any effect.
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to change
            the default connection factory being used.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="connectionFactory"> The connection factory. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            set the pluralization service.
            </summary>
            <param name="pluralizationService"> The pluralization service to use. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            set the database initializer to use for the given context type.  The database initializer is called when a
            the given <see cref="T:System.Data.Entity.DbContext"/> type is used to access a database for the first time.
            The default strategy for Code First contexts is an instance of <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <remarks>
            Calling this method is equivalent to calling <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})"/>.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <typeparam name="TContext"> The type of the context. </typeparam>
            <param name="initializer"> The initializer to use, or null to disable initialization for the given context type. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is typically used by providers to register an associated SQL generator for Code First Migrations.
            It is different from setting the generator in the <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> because it allows
            EF to use the Migrations pipeline to create a database even when there is no Migrations configuration in the project
            and/or Migrations are not being explicitly used.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The invariant name of the ADO.NET provider for which this generator should be used. </param>
            <param name="sqlGenerator"> A delegate that returns a new instance of the SQL generator each time it is called. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver"/> which allows provider manifest tokens to
            be obtained from connections without necessarily opening the connection.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="resolver"> The manifest token resolver. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory for implementations of <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> which allows custom annotations
            represented by <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/> instances to be serialized to and from the EDMX XML.
            </summary>
            <remarks>
            Note that an <see cref="T:System.Func`1"/> is not needed if the annotation uses a simple string value.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="annotationName"> The name of custom annotation that will be handled by this serializer. </param>
            <param name="serializerFactory"> A delegate that will be used to create serializer instances. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver"/> which allows a <see cref="T:System.Data.Common.DbProviderFactory"/>
            to be obtained from a <see cref="T:System.Data.Common.DbConnection"/> in cases where the default implementation is not
            sufficient.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerFactoryResolver"> The provider factory service. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`2"/> as the model cache key factory which allows the key
            used to cache the model behind a <see cref="T:System.Data.Entity.DbContext"/> to be changed.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`2"/>. This means that, if desired, the same functionality can
            be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="keyFactory"> The key factory. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`3"/> delegate which which be used for 
            creation of the default  <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> for a any
            <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/>. This default factory will only be used if no factory is
            set explicitly in the <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> and if no factory has been registered
            for the provider in use using the
            <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})"/>
            method.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`3"/>. This means that, if desired, the same functionality
            can be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="factory"> 
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`3"/> delegate which allows for creation of a customized
            <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> for the given provider for any <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> 
            that does not have an explicit factory set.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`3"/>. This means that, if desired, the same functionality
            can be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The invariant name of the ADO.NET provider for which this generator should be used. </param>
            <param name="factory"> 
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            the global instance of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> which will be used whenever a spatial provider is
            required and a provider-specific spatial provider cannot be found. Normally, a provider-specific spatial provider
            is obtained from the a <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> implementation which is in turn returned by resolving
            a service for <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> passing the provider invariant name as a key. However, this
            cannot work for stand-alone instances of <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> and <see cref="T:System.Data.Entity.Spatial.DbGeography"/> since
            it is impossible to know the spatial provider to use. Therefore, when creating stand-alone instances
            of <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> and <see cref="T:System.Data.Entity.Spatial.DbGeography"/> the global spatial provider is always used.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> to use for a specific provider and provider
            manifest token.
            </summary>
            <remarks>
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)"/>
            to register spatial services for use only when a specific manifest token is returned by the provider.
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)"/> to register global
            spatial services to be used when provider information is not available or no provider-specific
            spatial services are found.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="key">
            The <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> indicating the type of ADO.NET connection for which this spatial provider will be used.
            </param>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> to use for a specific provider with any
            manifest token.
            </summary>
            <remarks>
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)"/> 
            to register spatial services for use when any manifest token is returned by the provider.
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)"/> to register global
            spatial services to be used when provider information is not available or no provider-specific
            spatial services are found.
            
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this spatial provider will be used. </param>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory for the type of <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter"/> to use with <see cref="P:System.Data.Entity.Database.Log"/>.
            </summary>
            <remarks>
            Note that setting the type of formatter to use with this method does change the way command are
            logged when <see cref="P:System.Data.Entity.Database.Log"/> is used. It is still necessary to set a <see cref="T:System.IO.TextWriter"/>
            instance onto <see cref="P:System.Data.Entity.Database.Log"/> before any commands will be logged.
            For more low-level control over logging/interception see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> and
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="logFormatterFactory">A delegate that will create formatter instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            register an <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> at application startup. Note that interceptors can also
            be added and removed at any time using <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="interceptor">The interceptor to register.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory to allow <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo"/> to create instances of a context that does not have a public,
            parameterless constructor.
            </summary>
            <remarks>
            This is typically needed to allow design-time tools like Migrations or scaffolding code to use contexts that
            do not have public, parameterless constructors.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/> with the context <see cref="T:System.Type"/> as the key. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <param name="contextType">The context type for which the factory should be used.</param>
            <param name="factory">The delegate to use to create context instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory to allow <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo"/> to create instances of a context that does not have a public,
            parameterless constructor.
            </summary>
            <remarks>
            This is typically needed to allow design-time tools like Migrations or scaffolding code to use contexts that
            do not have public, parameterless constructors.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/> with the context <see cref="T:System.Type"/> as the key. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <typeparam name="TContext">The context type for which the factory should be used.</typeparam>
            <param name="factory">The delegate to use to create context instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetModelStore(System.Data.Entity.Infrastructure.DbModelStore)">
            <summary>
            Sets a singleton model store implementation (persisted model cache).
            </summary>
            <param name="modelStore">The model store implementation.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            a database table existence checker for a given provider.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> and also using AddDefaultResolver to add the provider as a default
            resolver. This means that, if desired, the same functionality can be achieved using a custom resolver or a
            resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="tableExistenceChecker"> The table existence checker to use. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="E:System.Data.Entity.DbConfiguration.Loaded">
            <summary>
            Occurs during EF initialization after the DbConfiguration has been constructed but just before
            it is locked ready for use. Use this event to inspect and/or override services that have been
            registered before the configuration is locked. Note that this event should be used carefully
            since it may prevent tooling from discovering the same configuration that is used at runtime.
            </summary>
            <remarks>
            Handlers can only be added before EF starts to use the configuration and so handlers should
            generally be added as part of application initialization. Do not access the DbConfiguration
            static methods inside the handler; instead use the the members of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs"/>
            to get current services and/or add overrides.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> that is being used to resolve service
            dependencies in the Entity Framework.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
            <summary>
            This attribute can be placed on a subclass of <see cref="T:System.Data.Entity.DbContext"/> to indicate that the subclass of
            <see cref="T:System.Data.Entity.DbConfiguration"/> representing the code-based configuration for the application is in a different
            assembly than the context type.
            </summary>
            <remarks>
            Normally a subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> should be placed in the same assembly as
            the subclass of <see cref="T:System.Data.Entity.DbContext"/> used by the application. It will then be discovered automatically.
            However, if this is not possible or if the application contains multiple context types in different
            assemblies, then this attribute can be used to direct DbConfiguration discovery to the appropriate type.
            An alternative to using this attribute is to specify the DbConfiguration type to use in the application's
            config file. See http://go.microsoft.com/fwlink/?LinkId=260883 for more information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
            <summary>
            Indicates that the given subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> should be used for code-based configuration
            for this application.
            </summary>
            <param name="configurationType">
            The <see cref="T:System.Data.Entity.DbConfiguration"/> type to use.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
            <summary>
            Indicates that the subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> represented by the given assembly-qualified
            name should be used for code-based configuration for this application.
            </summary>
            <param name="configurationTypeName">
            The <see cref="T:System.Data.Entity.DbConfiguration"/> type to use.
            </param>
        </member>
        <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
            <summary>
            Gets the subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> that should be used for code-based configuration
            for this application.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
            <summary>Implements the basic functionality required by aggregates in a GroupBy clause. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
            <summary>
            Gets the result type of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.
            </summary>
            <returns>
            The result type of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
            <summary>
            Gets the list of expressions that define the arguments to this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />
            .
            </summary>
            <returns>
            The list of expressions that define the arguments to this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
            <summary>Represents the logical AND of two Boolean arguments. This class cannot be inherited. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
            <summary>Implements the basic functionality required by expressions that accept two expression operands.</summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>Represents the base type for all expressions.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            The type of the result produced by <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </returns>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <typeparam name="TResultType">The type of the result produced by visitor.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current DbExpression instance.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current DbExpression instance; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare to the current <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
            <summary>Serves as a hash function for the type.</summary>
            <returns>A hash code for the current expression.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified binary value, which may be null
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified binary value.
            </returns>
            <param name="value">The binary value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from a byte array.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Boolean value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Boolean value.
            </returns>
            <param name="value">The Boolean value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) byte value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified byte value.
            </returns>
            <param name="value">The byte value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.DateTime" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DateTime value.
            </returns>
            <param name="value">The DateTime value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The expression to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.DateTimeOffset" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DateTimeOffset value.
            </returns>
            <param name="value">The DateTimeOffset value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) decimal value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified decimal value.
            </returns>
            <param name="value">The decimal value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) double value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified double value.
            </returns>
            <param name="value">The double value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            value, which may be null.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DbGeography value.
            </returns>
            <param name="value">The DbGeography value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Data.Entity.Spatial.DbGeography"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            value, which may be null.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DbGeometry value.
            </returns>
            <param name="value">The DbGeometry value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.Guid" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Guid value.
            </returns>
            <param name="value">The Guid value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int16 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int16 value.
            </returns>
            <param name="value">The Int16 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int32 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int32 value.
            </returns>
            <param name="value">The Int32 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int64 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int64 value.
            </returns>
            <param name="value">The Int64 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Single value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Single value.
            </returns>
            <param name="value">The Single value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified string value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified string value.
            </returns>
            <param name="value">The string value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
            <summary>Gets the type metadata for the result type of the expression.</summary>
            <returns>The type metadata for the result type of the expression.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
            <summary>Gets the kind of the expression, which indicates the operation of this expression.</summary>
            <returns>The kind of the expression, which indicates the operation of this expression.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the left argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the left argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />
            ,or its result type is not equal or promotable to the required type for the left argument.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the right argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the right argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />
            ,or its result type is not equal or promotable to the required type for the right argument.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by the  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
            <summary>Represents an apply operation, which is the invocation of the specified function for each element in the specified input set. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by the  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
            <summary>
            Represents an arithmetic operation applied to numeric arguments.
            Addition, subtraction, multiplication, division, modulo, and negation are arithmetic operations.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
            <summary>
            Gets the list of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> elements that define the current arguments.
            </summary>
            <returns>
            A fixed-size list of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> elements.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
            <summary>
            Represents the When, Then, and Else clauses of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            . This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
            <summary>
            Gets the When clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The When clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
            <summary>
            Gets the Then clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The Then clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
            <summary>
            Gets the Else clause of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The Else clause of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            ,or its result type is not equal or promotable to the result type of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
            <summary>Represents the type conversion of a single argument to the specified type. This class cannot be inherited. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
            <summary>Implements the basic functionality required by expressions that accept a single expression argument. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" />
            , or its result type is not equal or promotable to the required type for the argument.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
            <summary>
            Describes the different "kinds" (classes) of command trees.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
            <summary>
            A query to retrieve data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
            <summary>
            Update existing data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
            <summary>
            Insert new data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
            <summary>
            Deleted existing data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
            <summary>
            Call a function
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
            <summary>Represents a comparison operation applied to two arguments. Equality, greater than, greater than or equal, less than, less than or equal, and inequality are comparison operations. This class cannot be inherited.  </summary>
            <remarks>
            DbComparisonExpression requires that its arguments have a common result type
            that is equality comparable (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.Equals and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.NotEquals),
            order comparable (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.GreaterThan and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.LessThan),
            or both (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.GreaterThanOrEquals and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.LessThanOrEquals).
            </remarks> 
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
            <summary>Represents different kinds of constants (literals). This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
            <summary>Gets the constant value.</summary>
            <returns>The constant value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
            <summary>Represents an unconditional join operation between the given collection arguments. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
            <summary>Represents the an expression that retrieves an entity based on the specified reference. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
            <summary>Removes duplicate elements from the specified set argument. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
            <summary>Represents the conversion of the specified set argument to a singleton. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
            <summary>Represents an expression that extracts a reference from the underlying entity instance. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
            <summary>Represents the set subtraction operation between the left and right operands. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
            <summary>
            Describes a binding for an expression. Conceptually similar to a foreach loop
            in C#. The DbExpression property defines the collection being iterated over,
            while the Var property provides a means to reference the current element
            of the collection during the iteration. DbExpressionBinding is used to describe the set arguments
            to relational expressions such as <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression"/>, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression"/>
            and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression"/>.
            </summary>
            <seealso cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable"/>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the binding, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
            <summary>Gets the name assigned to the element variable.</summary>
            <returns>The name assigned to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
            <summary>Gets the type metadata of the element variable.</summary>
            <returns>The type metadata of the element variable. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.
            </summary>
            <returns>The variable reference.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
            <summary>Represents a predicate applied to filter an input set. This produces the set of elements that satisfy the predicate. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            , or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
            <summary>Represents an invocation of a function. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
            <summary>Gets the metadata for the function to invoke.</summary>
            <returns>The metadata for the function to invoke.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
            <summary>Represents a collection of elements that compose a group.  </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
            <summary>Represents a group by operation. A group by operation is a grouping of the elements in the input set based on the specified key expressions followed by the application of the specified aggregates. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides grouping keys.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides grouping keys.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
            <summary>Represents the set intersection operation between the left and right operands. This class cannot be inherited. </summary>
            <remarks>
            DbIntersectExpression requires that its arguments have a common collection result type
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
            <summary>Represents an empty set determination applied to a single set argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
            <summary>Represents null determination applied to a single argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
            <summary>Represents the type comparison of a single argument against the specified type. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
            <summary>Gets the type metadata that the type metadata of the argument should be compared to.</summary>
            <returns>The type metadata that the type metadata of the argument should be compared to.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
            <summary>Represents an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
            <summary>Gets the join condition to apply.</summary>
            <returns>The join condition to apply.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            , or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
            <summary>
            Allows the application of a lambda function to arguments represented by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            objects.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>The visitor pattern method for expression visitors that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>The visitor pattern method for expression visitors that produce a result value of a specific type.</summary>
            <returns>The type of the result produced by the expression visitor.</returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of type TResultType.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to which the Lambda function should be applied.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
            <summary>Represents a string comparison against the specified pattern with an optional escape string. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
            <summary>Gets an expression that specifies the string to compare against the given pattern.</summary>
            <returns>An expression that specifies the string to compare against the given pattern.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
            <summary>Gets an expression that specifies the pattern against which the given string should be compared.</summary>
            <returns>An expression that specifies the pattern against which the given string should be compared.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
            <summary>Gets an expression that provides an optional escape string to use for the comparison.</summary>
            <returns>An expression that provides an optional escape string to use for the comparison.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
            <summary>Represents the restriction of the number of elements in the argument collection to the specified limit value.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
            <summary>Gets an expression that specifies the input collection.</summary>
            <returns>An expression that specifies the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            , or its result type is not a collection type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
            <summary>Gets an expression that specifies the limit on the number of elements returned from the input collection.</summary>
            <returns>An expression that specifies the limit on the number of elements returned from the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            , or is not one of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            , or its result type is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
            <summary>
            Gets whether the limit operation will include tied results. Including tied results might produce more results than specified by the
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit" />
            value.
            </summary>
            <returns>true if the limit operation will include tied results; otherwise, false. The default is false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
            <summary>Represents the construction of a new instance of a given type, including set and record types. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
            <summary>Represents the logical NOT of a single Boolean argument. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
            <summary>Represents a reference to a typed null literal. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
            <summary>Represents the retrieval of elements of the specified type from the given set argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
            <summary>Gets the metadata of the type of elements that should be retrieved from the set argument.</summary>
            <returns>The metadata of the type of elements that should be retrieved from the set argument. </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
            <summary>Represents the logical OR of two Boolean arguments. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
            <summary>Represents a reference to a parameter declared on the command tree that contains this expression. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
            <summary>Gets the name of the referenced parameter.</summary>
            <returns>The name of the referenced parameter.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
            <summary>Represents the projection of a given input set over the specified expression. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the projection.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the projection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            , or its result type is not equal or promotable to the reference type of the current projection.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
            <summary>Provides methods and properties for retrieving an instance property. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
            <summary>Creates a new key/value pair based on this property expression.</summary>
            <returns>
            A new key/value pair with the key and value derived from the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
            <summary>
            Enables implicit casting to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="value">The expression to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
            <summary>Gets the property metadata for the property to retrieve.</summary>
            <returns>The property metadata for the property to retrieve.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            , or its result type is not equal or promotable to the type that defines the property.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
            <summary>Represents a quantifier operation of the specified kind over the elements of the specified input set. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
            <summary>Gets the Boolean predicate that should be evaluated for each element in the input set.</summary>
            <returns>The Boolean predicate that should be evaluated for each element in the input set.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree for the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            ,or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
            <summary>Represents a strongly typed reference to a specific instance within an entity set. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
            <summary>Gets the metadata for the entity set that contains the instance.</summary>
            <returns>The metadata for the entity set that contains the instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
            <summary>Represents the navigation of a relationship. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value. </summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
            <summary>Gets the metadata for the relationship over which navigation occurs.</summary>
            <returns>The metadata for the relationship over which navigation occurs.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
            <summary>Gets the metadata for the relationship end to navigate from.</summary>
            <returns>The metadata for the relationship end to navigate from.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
            <summary>Gets the metadata for the relationship end to navigate to.</summary>
            <returns>The metadata for the relationship end to navigate to.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the starting point of the navigation and must be a reference to an entity instance.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the instance of the source relationship end from which navigation should occur.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            , or its result type is not equal or promotable to the reference type of the
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" />
            property.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
            <summary>
            Skips a specified number of elements in the input set.
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            can only be used after the input collection has been sorted as specified by the sort keys.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
            <summary>Gets an expression that specifies the number of elements to skip from the input collection.</summary>
            <returns>An expression that specifies the number of elements to skip from the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            ; the expression is not either a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            or a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            ; or the result type of the expression is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
            <summary>
            Specifies a sort key that can be used as part of the sort order in a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            . This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
            <summary>Gets a Boolean value indicating whether or not this sort key uses an ascending sort order.</summary>
            <returns>true if this sort key uses an ascending sort order; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
            <summary>Gets a string value that specifies the collation for this sort key.</summary>
            <returns>A string value that specifies the collation for this sort key.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
            <summary>Represents a sort operation applied to the elements of the specified input set based on the given sort keys. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by 
            visitor
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            visitor  
            is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
            <summary>Represents a type conversion operation applied to a polymorphic argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
            <summary>Supports standard aggregate functions, such as MIN, MAX, AVG, SUM, and so on. This class cannot be inherited.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
            <summary>Gets a value indicating whether this aggregate is a distinct aggregate.</summary>
            <returns>true if the aggregate is a distinct aggregate; otherwise, false. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
            <summary>Gets the method metadata that specifies the aggregate function to invoke.</summary>
            <returns>The method metadata that specifies the aggregate function to invoke.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
            <summary>
            An abstract base type for types that implement the IExpressionVisitor interface to derive from.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
            <summary>
            An abstract base type for types that implement the IExpressionVisitor interface to derive from.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
            <summary>Defines the basic functionality that should be implemented by visitors that do not return a result value.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
            <param name="expression">The expression to be handled.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Visitor pattern method for DbInExpression.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression"/>.
            </summary>
            <param name="expression"> The DbUnaryExpression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression"/>.
            </summary>
            <param name="expression"> The DbBinaryExpression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding"/>.
            </summary>
            <param name="binding"> The DbExpressionBinding to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="binding"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Convenience method for post-processing after a DbExpressionBinding has been visited.
            </summary>
            <param name="binding"> The previously visited DbExpressionBinding. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding"/>.
            </summary>
            <param name="binding"> The DbGroupExpressionBinding to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="binding"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method indicating that the grouping keys of a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/> have been visited and the aggregates are now about to be visited.
            </summary>
            <param name="binding"> The DbGroupExpressionBinding of the DbGroupByExpression </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method for post-processing after a DbGroupExpressionBinding has been visited.
            </summary>
            <param name="binding"> The previously visited DbGroupExpressionBinding. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>
            Convenience method indicating that the body of a Lambda <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression"/> is now about to be visited.
            </summary>
            <param name="lambda"> The DbLambda that is about to be visited </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lambda"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>
            Convenience method for post-processing after a DbLambda has been visited.
            </summary>
            <param name="lambda"> The previously visited DbLambda. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>, if non-null.
            </summary>
            <param name="expression"> The expression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Convenience method to visit each <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> in the given list, if the list is non-null.
            </summary>
            <param name="expressionList"> The list of expressions to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expressionList"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
            <summary>
            Convenience method to visit each <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate"/> in the list, if the list is non-null.
            </summary>
            <param name="aggregates"> The list of aggregates to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregates"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate"/>.
            </summary>
            <param name="aggregate"> The aggregate to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Called when an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> of an otherwise unrecognized type is encountered.
            </summary>
            <param name="expression"> The expression </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
            <exception cref="T:System.NotSupportedException">
            Always thrown if this method is called, since it indicates that
            <paramref name="expression"/>
            is of an unsupported type
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression"/>.
            </summary>
            <param name="expression"> The DbConstantExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression"/>.
            </summary>
            <param name="expression"> The DbNullExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/>.
            </summary>
            <param name="expression"> The DbVariableReferenceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression"/>.
            </summary>
            <param name="expression"> The DbParameterReferenceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression"/>.
            </summary>
            <param name="expression"> The DbFunctionExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression"/>.
            </summary>
            <param name="expression"> The DbLambdaExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression"/>.
            </summary>
            <param name="expression"> The DbPropertyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression"/>.
            </summary>
            <param name="expression"> The DbComparisonExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression"/>.
            </summary>
            <param name="expression"> The DbLikeExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression"/>.
            </summary>
            <param name="expression"> The DbLimitExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression"/>.
            </summary>
            <param name="expression"> The DbIsNullExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression"/>.
            </summary>
            <param name="expression"> The DbArithmeticExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression"/>.
            </summary>
            <param name="expression"> The DbAndExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression"/>.
            </summary>
            <param name="expression"> The DbOrExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression"/>.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression"/>.
            </summary>
            <param name="expression"> The DbNotExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression"/>.
            </summary>
            <param name="expression"> The DbDistinctExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression"/>.
            </summary>
            <param name="expression"> The DbElementExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression"/>.
            </summary>
            <param name="expression"> The DbIsEmptyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression"/>.
            </summary>
            <param name="expression"> The DbUnionAllExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression"/>.
            </summary>
            <param name="expression"> The DbIntersectExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression"/>.
            </summary>
            <param name="expression"> The DbExceptExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression"/>.
            </summary>
            <param name="expression"> The DbOfTypeExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression"/>.
            </summary>
            <param name="expression"> The DbTreatExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression"/>.
            </summary>
            <param name="expression"> The DbCastExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression"/>.
            </summary>
            <param name="expression"> The DbIsOfExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression"/>.
            </summary>
            <param name="expression"> The DbCaseExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression"/>.
            </summary>
            <param name="expression"> The DbNewInstanceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression"/>.
            </summary>
            <param name="expression"> The DbRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression"/>.
            </summary>
            <param name="expression"> The DbRelationshipNavigationExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression"/>.
            </summary>
            <param name="expression"> The DeRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression"/>.
            </summary>
            <param name="expression"> The DbRefKeyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression"/>.
            </summary>
            <param name="expression"> The DbEntityRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression"/>.
            </summary>
            <param name="expression"> The DbScanExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression"/>.
            </summary>
            <param name="expression"> The DbFilterExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression"/>.
            </summary>
            <param name="expression"> The DbProjectExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression"/>.
            </summary>
            <param name="expression"> The DbCrossJoinExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression"/>.
            </summary>
            <param name="expression"> The DbJoinExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression"/>.
            </summary>
            <param name="expression"> The DbApplyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/>.
            </summary>
            <param name="expression"> The DbExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression"/>.
            </summary>
            <param name="expression"> The DbSkipExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression"/>.
            </summary>
            <param name="expression"> The DbSortExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression"/>.
            </summary>
            <param name="expression"> The DbQuantifierExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
            <summary>Implements the visitor pattern for the set clause.</summary>
            <param name="setClause">The set clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
            <summary>Implements the visitor pattern for the modification clause.</summary>
            <param name="modificationClause">The modification clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
            <summary>Implements the visitor pattern for the collection of modification clauses.</summary>
            <param name="modificationClauses">The modification clauses.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>Implements the visitor pattern for the command tree.</summary>
            <param name="commandTree">The command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
            <summary>Implements the visitor pattern for the delete command tree.</summary>
            <param name="deleteTree">The delete command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
            <summary>Implements the visitor pattern for the function command tree.</summary>
            <param name="functionTree">The function command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
            <summary>Implements the visitor pattern for the insert command tree.</summary>
            <param name="insertTree">The insert command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
            <summary>Implements the visitor pattern for the query command tree.</summary>
            <param name="queryTree">The query command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
            <summary>Implements the visitor pattern for the update command tree.</summary>
            <param name="updateTree">The update command tree.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
            <summary>An immutable class that implements the basic functionality for the Query, Insert, Update, Delete, and function invocation command tree types. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this command.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
            <summary>
            Gets a value indicating whether database null semantics are exhibited when comparing
            two operands, both of which are potentially nullable. The default value is true.
            
            For example (operand1 == operand2) will be translated as:
            
            (operand1 = operand2)
            
            if UseDatabaseNullSemantics is true, respectively
            
            (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))
            
            if UseDatabaseNullSemantics is false.
            </summary>
            <value>
            <c>true</c> if database null comparison behavior is enabled, otherwise <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
            <summary>
            Gets the name and corresponding type of each parameter that can be referenced within this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            .
            </summary>
            <returns>
            The name and corresponding type of each parameter that can be referenced within this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
            <summary>
            Gets the kind of this command tree.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
            <summary>
            Gets the metadata workspace used by this command tree.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
            <summary>
            Gets the data space in which metadata used by this command tree must reside.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
            <summary>Represents a single row delete operation expressed as a command tree. This class cannot be inherited.  </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
            <summary>Represents a data manipulation language (DML) operation expressed as a command tree.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the data manipulation language (DML) operation.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the DML operation.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="predicate">A predicate used to determine which members of the target collection should be deleted.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.
            </summary>
            <remarks>
            The predicate can include only the following elements:
            <list>
                <item>Equality expression</item>
                <item>Constant expression</item>
                <item>IsNull expression</item>
                <item>Property expression</item>
                <item>Reference expression to the target</item>
                <item>And expression</item>
                <item>Or expression</item>
                <item>Not expression</item>
            </list>
            </remarks>        
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
            <summary>
            Contains values that each expression class uses to denote the operation it represents. The
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind" />
            property of an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            can be retrieved to determine which operation that expression represents.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
            <summary>
            True for all.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
            <summary>
            Logical And.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
            <summary>
            True for any.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
            <summary>
            Conditional case statement.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
            <summary>
            Polymorphic type cast.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
            <summary>
            A constant value.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
            <summary>
            Cross apply
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
            <summary>
            Cross join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
            <summary>
            Dereference.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
            <summary>
            Duplicate removal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
            <summary>
            Set to singleton conversion.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
            <summary>
            Entity ref value retrieval.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
            <summary>
            Equality
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
            <summary>
            Set subtraction
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
            <summary>
            Restriction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
            <summary>
            Full outer join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
            <summary>
            Invocation of a stand-alone function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
            <summary>
            Greater than or equal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
            <summary>
            Grouping.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
            <summary>
            Set intersection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
            <summary>
            Empty set determination.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
            <summary>
            Null determination.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
            <summary>
            Type comparison (specified Type or Subtype).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
            <summary>
            Type comparison (specified Type only).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
            <summary>
            Left outer join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
            <summary>
            Less than or equal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
            <summary>
            String comparison.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
            <summary>
            Result count restriction (TOP n).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
            <summary>
            Modulo.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
            <summary>
            Instance, row, and set construction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
            <summary>
            Logical Not.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
            <summary>
            Inequality.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
            <summary>
            Null.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
            <summary>
            Set members by type (or subtype).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
            <summary>
            Set members by (exact) type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
            <summary>
            Logical Or.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
            <summary>
            Outer apply.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
            <summary>
            A reference to a parameter.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
            <summary>
            Projection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
            <summary>
            Retrieval of a static or instance property.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
            <summary>
            Reference.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
            <summary>
            Ref key value retrieval.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
            <summary>
            Navigation of a (composition or association) relationship.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
            <summary>
            Entity or relationship set scan.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
            <summary>
            Skip elements of an ordered collection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
            <summary>
            Sorting.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
            <summary>
            Type conversion.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
            <summary>
            Set union (with duplicates).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
            <summary>
            A reference to a variable.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
            <summary>
            Application of a lambda function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
            <summary>
            In.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
            <summary>Represents the invocation of a database function. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
            <summary>
            Constructs a new DbFunctionCommandTree that uses the specified metadata workspace, data space and function metadata
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="edmFunction">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> that represents the function that is being invoked.</param>
            <param name="resultType">The expected result type for the function’s first result set.</param>
            <param name="parameters">The function's parameters.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>, <paramref name="dataSpace"/> or <paramref name="edmFunction"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/> does not represent a valid data space or <paramref name="edmFunction"/>
            is a composable function
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
            <summary>Gets the expected result type for the function’s first result set.</summary>
            <returns>The expected result type for the function’s first result set.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
            <summary>Gets or sets the command tree kind.</summary>
            <returns>The command tree kind.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
            <summary>Represents a single row insert operation expressed as a command tree. This class cannot be inherited.</summary>
            <remarks>
            Represents a single row insert operation expressed as a canonical command tree.
            When the <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning"/> property is set, the command returns a reader; otherwise,
            it returns a scalar value indicating the number of rows affected.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="setClauses">The list of insert set clauses that define the insert operation. .</param>
            <param name="returning">A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that specifies a projection of results to be returned, based on the modified rows.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
            <summary>Gets the list of insert set clauses that define the insert operation. </summary>
            <returns>The list of insert set clauses that define the insert operation. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. null indicates that no results should be returned from this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
            <summary>Gets the command tree kind.</summary>
            <returns>The command tree kind.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda">
            <summary>
            Represents a Lambda function that can be invoked to produce a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters</returns>
            <param name="body">An expression that defines the logic of the Lambda function</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/> collection that represents the formal parameters to the Lambda function.    These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="variables"/>
            is null or contains null, or
            <paramref name="body"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variables"/>
            contains more than one element with the same variable name.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters</returns>
            <param name="body">An expression that defines the logic of the Lambda function</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/> collection that represents the formal parameters to the Lambda function.    These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="variables"/>
            is null or contains null, or
            <paramref name="body"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variables"/>
            contains more than one element with the same variable name.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with a single argument of the specified type, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and single formal parameter.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>        
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="argument15Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null,
            <paramref name="argument15Type"/>
            is null,
            or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="argument15Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifteenth argument to the Lambda function
            </param>
            <param name="argument16Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null,
            <paramref name="argument15Type"/>
            is null,
            <paramref name="argument16Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Body">
            <summary>Gets the body of the lambda expression.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the body of the lambda function.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Variables">
            <summary>Gets the parameters of the lambda expression.</summary>
            <returns>The list of lambda function parameters represented as DbVariableReferenceExpression objects.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
            <summary>
            Specifies a single clause in an insert or update modification operation, see
            <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses"/> and <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses"/>
            </summary>
            <remarks>
            An abstract base class allows the possibility of patterns other than
            Property = Value in future versions, e.g.,
            <code>update SomeTable
                set ComplexTypeColumn.SomeProperty()
                where Id = 2</code>
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
            <summary>Represents a query operation expressed as a command tree. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <param name="validate"> When set to false the validation of the tree is turned off. </param>
            <param name="useDatabaseNullSemantics">A boolean that indicates whether database null semantics are exhibited when comparing
            two operands, both of which are potentially nullable.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace, using database null semantics.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <param name="validate"> When set to false the validation of the tree is turned off. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace, using database null semantics.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">The expression is associated with a different command tree.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
            <summary>Specifies the clause in a modification operation that sets the value of a property. This class cannot be inherited. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
            <summary>Represents a single-row update operation expressed as a command tree. This class cannot be inherited.  </summary>
            <remarks>
            Represents a single-row update operation expressed as a canonical command tree.
            When the <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning"/> property is set, the command returns a reader; otherwise,
            it returns a scalar indicating the number of rows affected.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="predicate">A predicate used to determine which members of the target collection should be updated.</param>
            <param name="setClauses">The list of update set clauses that define the update operation.</param>
            <param name="returning">A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that specifies a projection of results to be returned, based on the modified rows.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
            <summary>Gets the list of update set clauses that define the update operation.</summary>
            <returns>The list of update set clauses that define the update operation.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned, based on the modified rows.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based, on the modified rows. null indicates that no results should be returned from this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
            <summary>Represents a reference to a variable that is currently in scope. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
            <summary>Gets the name of the referenced variable.</summary>
            <returns>The name of the referenced variable.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
            <summary>
            Defines the binding for the input set to a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/>.
            In addition to the properties of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding"/>, DbGroupExpressionBinding
            also provides access to the group element via the <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable"/> variable reference
            and to the group aggregate via the <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate"/> property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />
            , or its result type is not equal or promotable to the result type of the current value of the property.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
            <summary>Gets the name assigned to the element variable.</summary>
            <returns>The name assigned to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
            <summary>Gets the type metadata of the element variable.</summary>
            <returns>The type metadata of the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.
            </summary>
            <returns>A reference to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
            <summary>Gets the name assigned to the group element variable.</summary>
            <returns>The name assigned to the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
            <summary>Gets the type metadata of the group element variable.</summary>
            <returns>The type metadata of the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the group element variable.
            </summary>
            <returns>A reference to the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> that represents the collection of elements in the group.
            </summary>
            <returns>The elements in the group.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s and allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>Returns the specified arguments as a key/value pair object.</summary>
            <returns>A key/value pair object.</returns>
            <param name="value">The value in the key/value pair.</param>
            <param name="alias">The key in the key/value pair.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
            <summary>Returns the specified arguments as a key/value pair object.</summary>
            <returns>A key/value pair object.</returns>
            <param name="value">The value in the key/value pair.</param>
            <param name="alias">The key in the key/value pair.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses a generated variable name to bind the given expression.
            </summary>
            <returns>A new expression binding with the specified expression and a generated variable name.</returns>
            <param name="input">The expression to bind.</param>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses the specified variable name to bind the given expression
            </summary>
            <returns>A new expression binding with the specified expression and variable name.</returns>
            <param name="input">The expression to bind.</param>
            <param name="varName">The variable name that should be used for the binding.</param>
            <exception cref="T:System.ArgumentNullException">input or varName is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Creates a new group expression binding that uses generated variable and group variable names to bind the given expression.</summary>
            <returns>A new group expression binding with the specified expression and a generated variable name and group variable name.</returns>
            <param name="input">The expression to bind.</param>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that uses the specified variable name and group variable names to bind the given expression.
            </summary>
            <returns>A new group expression binding with the specified expression, variable name and group variable name.</returns>
            <param name="input">The expression to bind.</param>
            <param name="varName">The variable name that should be used for the binding.</param>
            <param name="groupVarName">The variable name that should be used to refer to the group when the new group expression binding is used in a group-by expression.</param>
            <exception cref="T:System.ArgumentNullException">input, varName or groupVarName is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.
            </summary>
            <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value false.</returns>
            <param name="function">The function that defines the aggregate operation.</param>
            <param name="argument">The argument over which the aggregate function should be calculated.</param>
            <exception cref="T:System.ArgumentNullException">function or argument null.</exception>
            <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> that is applied in a distinct fashion.
            </summary>
            <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value true.</returns>
            <param name="function">The function that defines the aggregate operation.</param>
            <param name="argument">The argument over which the aggregate function should be calculated.</param>
            <exception cref="T:System.ArgumentNullException">function or argument is null.</exception>
            <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate"/> over the specified argument
            </summary>
            <param name="argument"> The argument over which to perform the nest operation </param>
            <returns> A new group aggregate representing the elements of the group referenced by the given argument. </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="body">An expression that defines the logic of the Lambda function.</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
            <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="body">An expression that defines the logic of the Lambda function.</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
            <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and default collation.
            </summary>
            <returns>A new sort clause with the given sort key and ascending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and default collation.
            </summary>
            <returns>A new sort clause with the given sort key and descending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and the specified collation.
            </summary>
            <returns>A new sort clause with the given sort key and collation, and ascending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and the specified collation.
            </summary>
            <returns>A new sort clause with the given sort key and collation, and descending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the All operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">predicate  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
            <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
            <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
            <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
            <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
            <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that unconditionally joins the sets specified by the list of input expression bindings.
            </summary>
            <returns>
            A new DbCrossJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of CrossJoin, that represents the unconditional join of the input sets.
            </returns>
            <param name="inputs">A list of expression bindings that specifies the input sets.</param>
            <exception cref="T:System.ArgumentNullException">inputs is null or contains null element.</exception>
            <exception cref="T:System.ArgumentException">inputs contains fewer than 2 expression bindings.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using LeftOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using FullOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
            <returns>A new DbFilterExpression that produces the filtered set.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that groups the elements of the input set according to the specified group keys and applies the given aggregates.
            </summary>
            <returns>A new DbGroupByExpression with the specified input set, grouping keys and aggregates.</returns>
            <param name="input">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set.
            </param>
            <param name="keys">A list of string-expression pairs that define the grouping columns.</param>
            <param name="aggregates">A list of expressions that specify aggregates to apply.</param>
            <exception cref="T:System.ArgumentNullException">input, keys or aggregates is null, keys contains a null column key or expression, or aggregates contains a null aggregate column name or aggregate.</exception>
            <exception cref="T:System.ArgumentException">Both keys and aggregates are empty, or an invalid or duplicate column name was specified.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified expression over the given input set.
            </summary>
            <returns>A new DbProjectExpression that represents the projection operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="projection">An expression to project over the set.</param>
            <exception cref="T:System.ArgumentNullException">input or projection is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that sorts the given input set by the given sort specifications before skipping the specified number of elements.
            </summary>
            <returns>A new DbSkipExpression that represents the skip operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
            <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
            <exception cref="T:System.ArgumentNullException">input, sortOrder or count is null, or sortOrder contains null.</exception>
            <exception cref="T:System.ArgumentException">
            sortOrder is empty, or count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort specifications.
            </summary>
            <returns>A new DbSortExpression that represents the sort operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
            <exception cref="T:System.ArgumentNullException">input or sortOrder is null, or sortOrder contains null.</exception>
            <exception cref="T:System.ArgumentException">sortOrder is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, which represents a typed null value.
            </summary>
            <returns>An instance of DbNullExpression.</returns>
            <param name="nullType">The type of the null value.</param>
            <exception cref="T:System.ArgumentNullException">nullType is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the given constant value.
            </summary>
            <returns>A new DbConstantExpression with the given value.</returns>
            <param name="value">The constant value to represent.</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> of the specified primitive type with the given constant value.
            </summary>
            <returns>A new DbConstantExpression with the given value and a result type of constantType.</returns>
            <param name="constantType">The type of the constant value.</param>
            <param name="value">The constant value to represent.</param>
            <exception cref="T:System.ArgumentNullException">value or constantType is null.</exception>
            <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type, constantType does not represent a primitive type, or value is of a different primitive type than that represented by constantType.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that references a parameter with the specified name and type.
            </summary>
            <returns>A DbParameterReferenceExpression that represents a reference to a parameter with the specified name and type. The result type of the expression will be the same as type.</returns>
            <param name="type">The type of the referenced parameter.</param>
            <param name="name">The name of the referenced parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references a variable with the specified name and type.
            </summary>
            <returns>A DbVariableReferenceExpression that represents a reference to a variable with the specified name and type. The result type of the expression will be the same as type. </returns>
            <param name="type">The type of the referenced variable.</param>
            <param name="name">The name of the referenced variable.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that references the specified entity or relationship set.
            </summary>
            <returns>A new DbScanExpression based on the specified entity or relationship set.</returns>
            <param name="targetSet">Metadata for the entity or relationship set to reference.</param>
            <exception cref="T:System.ArgumentNullException">targetSet is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that performs the logical And of the left and right arguments.
            </summary>
            <returns>A new DbAndExpression with the specified arguments.</returns>
            <param name="left">A Boolean expression that specifies the left argument.</param>
            <param name="right">A Boolean expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">left and right  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that performs the logical Or of the left and right arguments.
            </summary>
            <returns>A new DbOrExpression with the specified arguments.</returns>
            <param name="left">A Boolean expression that specifies the left argument.</param>
            <param name="right">A Boolean expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression"/> that matches the result of the specified
            expression with the results of the constant expressions in the specified list.
            </summary>
            <param name="expression"> A DbExpression to be matched. </param>
            <param name="list"> A list of DbConstantExpression to test for a match. </param>
            <returns>
            A new DbInExpression with the specified arguments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            or
            <paramref name="list"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The result type of
            <paramref name="expression"/>
            is different than the result type of an expression from
            <paramref name="list"/>.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that performs the logical negation of the given argument.
            </summary>
            <returns>A new DbNotExpression with the specified argument.</returns>
            <param name="argument">A Boolean expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that divides the left argument by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the division operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left or right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that subtracts the right argument from the left argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the subtraction operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that computes the remainder of the left argument divided by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the modulo operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that multiplies the left argument by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the multiplication operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that adds the left argument to the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the addition operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the negation operation.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the negation operation.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for equality.
            </summary>
            <returns>A new DbComparisonExpression representing the equality comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for inequality.
            </summary>
            <returns>A new DbComparisonExpression representing the inequality comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the greater-than comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the less-than comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than or equal to the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the greater-than-or-equal-to comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than or equal to the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the less-than-or-equal-to comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common result type that is both equality- and order-comparable exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that determines whether the specified argument is null.
            </summary>
            <returns>A new DbIsNullExpression with the specified argument.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument has a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern.
            </summary>
            <returns>A new DbLikeExpression with the specified input, pattern and a null escape.</returns>
            <param name="argument">An expression that specifies the input string.</param>
            <param name="pattern">An expression that specifies the pattern string.</param>
            <exception cref="T:System.ArgumentNullException">Argument or pattern is null.</exception>
            <exception cref="T:System.ArgumentException">Argument or pattern does not have a string result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern using the optional escape.
            </summary>
            <returns>A new DbLikeExpression with the specified input, pattern and escape.</returns>
            <param name="argument">An expression that specifies the input string.</param>
            <param name="pattern">An expression that specifies the pattern string.</param>
            <param name="escape">An optional expression that specifies the escape string.</param>
            <exception cref="T:System.ArgumentNullException">argument,  pattern or escape is null.</exception>
            <exception cref="T:System.ArgumentException">argument,  pattern or escape does not have a string result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that applies a cast operation to a polymorphic argument.
            </summary>
            <returns>A new DbCastExpression with the specified argument and target type.</returns>
            <param name="argument">The argument to which the cast should be applied.</param>
            <param name="toType">Type metadata that specifies the type to cast to.</param>
            <exception cref="T:System.ArgumentNullException">Argument or toType is null.</exception>
            <exception cref="T:System.ArgumentException">The specified cast is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.
            </summary>
            <returns>A new DbTreatExpression with the specified argument and type.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="treatType">Type metadata for the treat-as type.</param>
            <exception cref="T:System.ArgumentNullException">argument or treatType is null.</exception>
            <exception cref="T:System.ArgumentException">treatType is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of the specified type.
            </summary>
            <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see
                cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />
            .
            </returns>
            <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="type">Type metadata for the type that elements of the input set must have to be included in the resulting set.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of exactly the specified type.
            </summary>
            <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see
                cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />
            .
            </returns>
            <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="type">Type metadata for the type that elements of the input set must match exactly to be included in the resulting set.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that determines whether the given argument is of the specified type or a subtype.
            </summary>
            <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOf.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> expression that determines whether the given argument is of the specified type, and only that type (not a subtype).
            </summary>
            <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOfOnly.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that retrieves a specific Entity given a reference expression.
            </summary>
            <returns>A new DbDerefExpression that retrieves the specified Entity.</returns>
            <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the reference. This expression must have a reference Type.
            </param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that retrieves the ref of the specifed entity in structural form.
            </summary>
            <returns>A new DbEntityRefExpression that retrieves a reference to the specified entity.</returns>
            <param name="argument">The expression that provides the entity. This expression must have an entity result type.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have an entity result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not from the same type hierarchy (a subtype, supertype, or the same type) as entitySet's element type.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not from the same type hierarchy (a subtype, supertype, or the same type) as entitySet's element type.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
            <param name="entitySet">The Entity set in which the referenced element resides.</param>
            <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or keyRow is null.</exception>
            <exception cref="T:System.ArgumentException">keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
            <param name="entitySet">The Entity set in which the referenced element resides.</param>
            <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
            <param name="entityType">The type of the Entity that the reference should refer to.</param>
            <exception cref="T:System.ArgumentNullException">entitySet, keyRow or entityType is null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not in the same type hierarchy as the entity set's entity type, or keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that retrieves the key values of the specifed reference in structural form.
            </summary>
            <returns>A new DbRefKeyExpression that retrieves the key values of the specified reference.</returns>
            <param name="argument">The expression that provides the reference. This expression must have a reference Type with an Entity element type.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
            <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
            <param name="navigateFrom">An expression that specifies the instance from which navigation should occur.</param>
            <param name="fromEnd">Metadata for the property that represents the end of the relationship from which navigation should occur.</param>
            <param name="toEnd">Metadata for the property that represents the end of the relationship to which navigation should occur.</param>
            <exception cref="T:System.ArgumentNullException">fromEnd, toEnd or navigateFrom is null.</exception>
            <exception cref="T:System.ArgumentException">fromEnd and toEnd are not declared by the same relationship type, or navigateFrom has a result type that is not compatible with the property type of fromEnd.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
            <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
            <param name="type">Metadata for the relation type that represents the relationship.</param>
            <param name="fromEndName">The name of the property of the relation type that represents the end of the relationship from which navigation should occur.</param>
            <param name="toEndName">The name of the property of the relation type that represents the end of the relationship to which navigation should occur.</param>
            <param name="navigateFrom">An expression the specifies the instance from which naviagtion should occur.</param>
            <exception cref="T:System.ArgumentNullException">type, fromEndName, toEndName or navigateFrom is null.</exception>
            <exception cref="T:System.ArgumentException">type is not associated with this command tree's metadata workspace or navigateFrom is associated with a different command tree, or type does not declare a relation end property with name toEndName or fromEndName, or navigateFrom has a result type that is not compatible with the property type of the relation end property with name fromEndName.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that removes duplicates from the given set argument.
            </summary>
            <returns>A new DbDistinctExpression that represents the distinct operation applied to the specified set argument.</returns>
            <param name="argument">An expression that defines the set over which to perfom the distinct operation.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that converts a set into a singleton.
            </summary>
            <returns>A DbElementExpression that represents the conversion of the set argument to a singleton.</returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that determines whether the specified set argument is an empty set.
            </summary>
            <returns>A new DbIsEmptyExpression with the specified argument.</returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that computes the subtraction of the right set argument from the left set argument.
            </summary>
            <returns>A new DbExceptExpression that represents the difference of the left argument from the right argument.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that computes the intersection of the left and right set arguments.
            </summary>
            <returns>A new DbIntersectExpression that represents the intersection of the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type exists between left or right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that computes the union of the left and right set arguments and does not remove duplicates.
            </summary>
            <returns>A new DbUnionAllExpression that union, including duplicates, of the the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
            <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
            <param name="argument">An expression that specifies the input collection.</param>
            <param name="count">An expression that specifies the limit value.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>A new DbCaseExpression with the specified cases and default result.</returns>
            <param name="whenExpressions">A list of expressions that provide the conditional for of each case.</param>
            <param name="thenExpressions">A list of expressions that provide the result of each case.</param>
            <param name="elseExpression">An expression that defines the result when no case is matched.</param>
            <exception cref="T:System.ArgumentNullException">whenExpressions or thenExpressions is null or contains null, or elseExpression is null.</exception>
            <exception cref="T:System.ArgumentException">whenExpressions or thenExpressions is empty or whenExpressions contains an expression with a non-Boolean result type, or no common result type exists for all expressions in thenExpressions and elseExpression.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
            <returns>A new DbFunctionExpression representing the function invocation.</returns>
            <param name="function">Metadata for the function to invoke.</param>
            <param name="arguments">A list of expressions that provide the arguments to the function.</param>
            <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
            <returns>A new DbFunctionExpression representing the function invocation.</returns>
            <param name="function">Metadata for the function to invoke.</param>
            <param name="arguments">Expressions that provide the arguments to the function.</param>
            <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
            <returns>A new Expression representing the Lambda function application.</returns>
            <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
            <param name="arguments">A list of expressions that provide the arguments.</param>
            <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
            <returns>A new expression representing the Lambda function application.</returns>
            <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
            <param name="arguments">Expressions that provide the arguments.</param>
            <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
            <param name="instanceType">The type of the new instance.</param>
            <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
            <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
            <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
            <param name="instanceType">The type of the new instance.</param>
            <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
            <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
            <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
            <param name="elements">A list of expressions that provide the elements of the collection.</param>
            <exception cref="T:System.ArgumentNullException">elements is null, or contains null.</exception>
            <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
            <param name="elements">A list of expressions that provide the elements of the collection.</param>
            <exception cref="T:System.ArgumentNullException">elements is null, or contains null..</exception>
            <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs an empty collection of the specified collection type.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and an empty Arguments list.</returns>
            <param name="collectionType">The type metadata for the collection to create</param>
            <exception cref="T:System.ArgumentNullException">collectionType is null.</exception>
            <exception cref="T:System.ArgumentException">collectionType is not a collection type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that produces a row with the specified named columns and the given values, specified as expressions.
            </summary>
            <returns>A new DbNewInstanceExpression that represents the construction of the row.</returns>
            <param name="columnValues">A list of string-DbExpression key-value pairs that defines the structure and values of the row.</param>
            <exception cref="T:System.ArgumentNullException">columnValues is null or contains an element with a null column name or expression.</exception>
            <exception cref="T:System.ArgumentException">columnValues is empty, or contains a duplicate or invalid column name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified property.
            </summary>
            <returns>A new DbPropertyExpression representing the property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the property. May be null if the property is static.</param>
            <param name="propertyMetadata">Metadata for the property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">propertyMetadata is null or instance is null and the property is not static.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified navigation property.
            </summary>
            <returns>A new DbPropertyExpression representing the navigation property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the navigation property.</param>
            <param name="navigationProperty">Metadata for the navigation property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">navigationProperty or instance is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified relationship end member.
            </summary>
            <returns>A new DbPropertyExpression representing the relationship end member retrieval.</returns>
            <param name="instance">The instance from which to retrieve the relationship end member.</param>
            <param name="relationshipEnd">Metadata for the relationship end member to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">relationshipEnd is null or instance is null and the property is not static.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the instance property with the specified name from the given instance.
            </summary>
            <returns>A new DbPropertyExpression that represents the property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the property.</param>
            <param name="propertyName">The name of the property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">propertyName is null or instance is null and the property is not static.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">No property with the specified name is declared by the type of instance.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> representing setting a property to a value.
            </summary>
            <param name="property">The property to be set.</param>
            <param name="value">The value to set the property to.</param>
            <returns>The newly created set clause.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the All operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing a predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">source  does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by Predicate  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
            <param name="source">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing the predicate to evaluate for each member of the input set. This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that specifies the logic to evaluate once for each member of the input set. </param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
            <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that specifies the logic to evaluate once for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentException">Source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
            <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using FullOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition"> A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using LeftOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the outer and inner expressions, on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
            <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
            <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
            <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
            <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
            <exception cref="T:System.ArgumentNullException">outer, inner, outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentException">outer or inner does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentException">The expressions produced by outerKey and innerKey are not comparable for equality.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified selector over the sets specified by the outer and inner expressions, joined on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbProjectExpression with the specified selector as its projection, and a new DbJoinExpression as its input. The input DbJoinExpression is created with an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
            <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
            <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
            <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
            <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
            <param name="selector">
            A method that specifies how an element of the result set should be derived from elements of the inner and outer sets. This method must produce an instance of a type that is compatible with Join and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
            <typeparam name="TSelector">The type of the  selector .</typeparam>
            <exception cref="T:System.ArgumentNullException">outer, inner, outerKey, innerKey or selector is null.</exception>
            <exception cref="T:System.ArgumentException">outer or inner does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of selector is null after conversion to DbExpression.</exception>
            <exception cref="T:System.ArgumentException">The expressions produced by outerKey and innerKey is not comparable for equality.</exception>
            <exception cref="T:System.ArgumentException">The result of Selector is not compatible with SelectMany.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and default collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey  does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and default collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that selects the specified expression over the given input set.
            </summary>
            <returns>A new DbProjectExpression that represents the select operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="projection">
            A method that specifies how to derive the projected expression given a member of the input set. This method must produce an instance of a type that is compatible with Select and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TProjection  are described in remarks.
            </param>
            <typeparam name="TProjection">The method result type of projection.</typeparam>
            <exception cref="T:System.ArgumentNullException">source or projection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of projection is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the apply column from each row, producing the overall collection of apply results.
            </summary>
            <returns>
            An new DbProjectExpression that selects the apply column from a new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that represents the logic to evaluate once for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by apply is null.</exception>
            <exception cref="T:System.ArgumentException">source  does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the specified selector over each row, producing the overall collection of results.
            </summary>
            <returns>
            An new DbProjectExpression that selects the result of the given selector from a new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that represents the logic to evaluate once for each member of the input set. </param>
            <param name="selector">
            A method that specifies how an element of the result set should be derived given an element of the input and apply sets. This method must produce an instance of a type that is compatible with SelectMany and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
            <typeparam name="TSelector">The method result type of selector.</typeparam>
            <exception cref="T:System.ArgumentNullException">source, apply or selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by apply is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of selector is null on conversion to DbExpression.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type. does not have a collection type. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that skips the specified number of elements from the given sorted input set.
            </summary>
            <returns>A new DbSkipExpression that represents the skip operation.</returns>
            <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that specifies the sorted input set.
            </param>
            <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">
            count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
            <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
            <param name="argument">An expression that specifies the input collection.</param>
            <param name="count">An expression that specifies the limit value.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with default collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with default collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing the predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that computes the union of the left and right set arguments with duplicates removed.
            </summary>
            <returns>A new DbExpression that computes the union, without duplicates, of the the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that invoke canonical EDM functions, and allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Avg' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the average value.</returns>
            <param name="collection">An expression that specifies the collection from which the average value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Count' function over the specified collection. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that produces the count value.</returns>
            <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BigCount' function over the specified collection. The result type of the expression is Edm.Int64.
            </summary>
            <returns>A new DbFunctionExpression that produces the count value.</returns>
            <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Max' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the maximum value.</returns>
            <param name="collection">An expression that specifies the collection from which the maximum value should be retrieved</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Min' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the minimum value.</returns>
            <param name="collection">An expression that specifies the collection from which the minimum value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Sum' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the sum.</returns>
            <param name="collection">An expression that specifies the collection from which the sum should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDev' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the standard deviation value over non-null members of the collection.</returns>
            <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDevP' function over the population of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the standard deviation value.</returns>
            <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Var' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the statistical variance value for the non-null members of the collection.</returns>
            <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'VarP' function over the population of the specified collection. The result type of the expression Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the statistical variance value.</returns>
            <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that produces the concatenated string.</returns>
            <param name="string1">An expression that specifies the string that should appear first in the concatenated result string.</param>
            <param name="string2">An expression that specifies the string that should appear second in the concatenated result string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not searchedForString occurs within searchedString.</returns>
            <param name="searchedString">An expression that specifies the string to search for any occurence of searchedForString.</param>
            <param name="searchedForString">An expression that specifies the string to search for in searchedString.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not stringArgument ends with suffix.</returns>
            <param name="stringArgument">An expression that specifies the string that is searched at the end for string suffix.</param>
            <param name="suffix">An expression that specifies the target string that is searched for at the end of stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the first index of stringToFind in searchString.</returns>
            <param name="searchString">An expression that specifies the string to search for stringToFind.</param>
            <param name="stringToFind">An expression that specifies the string to locate within searchString should be checked.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the the leftmost substring of length length from stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the leftmost substring.</param>
            <param name="length">An expression that specifies the length of the leftmost substring to extract from stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Length' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the length of stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string for which the length should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression than returns a new string based on stringArgument where every occurence of toReplace is replaced by replacement.</returns>
            <param name="stringArgument">An expression that specifies the string in which to perform the replacement operation.</param>
            <param name="toReplace">An expression that specifies the string that is replaced.</param>
            <param name="replacement">An expression that specifies the replacement string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that produces the reversed value of stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string to reverse.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the the rightmost substring of length length from stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the rightmost substring.</param>
            <param name="length">An expression that specifies the length of the rightmost substring to extract from stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not stringArgument starts with prefix.</returns>
            <param name="stringArgument">An expression that specifies the string that is searched at the start for string prefix.</param>
            <param name="prefix">An expression that specifies the target string that is searched for at the start of stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the substring of length length from stringArgument starting at start.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the substring.</param>
            <param name="start">An expression that specifies the starting index from which the substring should be taken.</param>
            <param name="length">An expression that specifies the length of the substring.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument converted to lower case.</returns>
            <param name="stringArgument">An expression that specifies the string that should be converted to lower case.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument converted to upper case.</returns>
            <param name="stringArgument">An expression that specifies the string that should be converted to upper case.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with leading and trailing space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which leading and trailing space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with trailing space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which trailing space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with leading space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which leading space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer year value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the year should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer month value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the month should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer day value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the day should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer day of year value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the day within the year should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer hour value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the hour should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer minute value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the minute should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer second value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the second should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer millisecond value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the millisecond should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of minutes dateTimeOffsetArgument is offset from GMT.</returns>
            <param name="dateTimeOffsetArgument">An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentDateTime' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current date and time as an Edm.DateTime instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentDateTimeOffset' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current date and time as an Edm.DateTimeOffset instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentUtcDateTime' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current UTC date and time as an Edm.DateTime instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that returns the value of dateValue with time set to zero.</returns>
            <param name="dateValue">An expression that specifies the value for which the time portion should be truncated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateDateTime' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTime.
            </summary>
            <returns>A new DbFunctionExpression that returns a new DateTime based on the specified values.</returns>
            <param name="year">An expression that provides the year value for the new DateTime instance.</param>
            <param name="month">An expression that provides the month value for the new DateTime instance.</param>
            <param name="day">An expression that provides the day value for the new DateTime instance.</param>
            <param name="hour">An expression that provides the hour value for the new DateTime instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTime instance.</param>
            <param name="second">An expression that provides the second value for the new DateTime instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTimeOffset.
            </summary>
            <returns>A new DbFunctionExpression that returns a new DateTimeOffset based on the specified values.</returns>
            <param name="year">An expression that provides the year value for the new DateTimeOffset instance.</param>
            <param name="month">An expression that provides the month value for the new DateTimeOffset instance.</param>
            <param name="day">An expression that provides the day value for the new DateTimeOffset instance.</param>
            <param name="hour">An expression that provides the hour value for the new DateTimeOffset instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTimeOffset instance.</param>
            <param name="second">An expression that provides the second value for the new DateTimeOffset instance.</param>
            <param name="timeZoneOffset">An expression that provides the number of minutes in the time zone offset value for the new DateTimeOffset instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateTime' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.Time.
            </summary>
            <returns>A new DbFunctionExpression that returns a new Time based on the specified values.</returns>
            <param name="hour">An expression that provides the hour value for the new DateTime instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTime instance.</param>
            <param name="second">An expression that provides the second value for the new DateTime instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of years specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of years to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of months specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of months to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of days specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of days to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of hours specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of hours to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of minutes specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of minutes to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of seconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of seconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of milliseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of milliseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of microseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of microseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of nanoseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of nanoseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of years that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of months that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of days that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of hours that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of minutes that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of seconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of milliseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of microseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of nanoseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that rounds the specified argument to the nearest integer value.</returns>
            <param name="value">An expression that specifies the numeric value to round.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that rounds the specified argument to the nearest integer value, with precision as specified by digits.</returns>
            <param name="value">An expression that specifies the numeric value to round.</param>
            <param name="digits">An expression that specifies the number of digits of precision to use when rounding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the largest integer value not greater than value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the smallest integer value not less than than value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the absolute value of value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that truncates the specified argument to the nearest integer value, with precision as specified by digits.</returns>
            <param name="value">An expression that specifies the numeric value to truncate.</param>
            <param name="digits">An expression that specifies the number of digits of precision to use when truncating.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types. The result type of the expression is the same as the result type of baseArgument.
            </summary>
            <returns>A new DbFunctionExpression that returns the value of baseArgument raised to the power specified by exponent.</returns>
            <param name="baseArgument">An expression that specifies the numeric value to raise to the given power.</param>
            <param name="exponent">An expression that specifies the power to which baseArgument should be raised.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise AND of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise OR of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise NOT of value.</returns>
            <param name="value">An expression that specifies the first operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise XOR (exclusive OR) of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'NewGuid' function.
            </summary>
            <returns>A new DbFunctionExpression that returns a new GUID value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
            <summary>
            Provides a constructor-like means of calling
            <see
                cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> class with the specified first column value and optional successive column values.
            </summary>
            <param name="columnValue">A key-value pair that provides the first column in the new row instance. (required)</param>
            <param name="columnValues">A key-value pairs that provide any subsequent columns in the new row instance. (optional)</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a new row based on the columns contained in this Row instance.
            </summary>
            <returns>A new DbNewInstanceExpression that constructs a row with the same column names and DbExpression values as this Row instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Converts the given Row instance into an instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </summary>
            <param name="row">The Row instance.</param>
            <returns> A DbExpression based on the Row instance </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="row"/>
            is null.
            </exception>
            <seealso cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression"/>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that invoke spatial realted canonical EDM functions, and, where appropriate, allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry. Its value has the default coordinate system id (SRID) of the underlying provider.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified arguments. wellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromText' function with the specified arguments. pointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
            <param name="pointWellKnownText">An expression that provides the well known text representation of the geometry point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromText' function with the specified arguments. lineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
            <param name="lineWellKnownText">An expression that provides the well known text representation of the geometry line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromText' function with the specified arguments. polygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
            <param name="polygonWellKnownText">An expression that provides the well known text representation of the geometry polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromText' function with the specified arguments. multiPointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geometry multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromText' function with the specified arguments. multiLineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geometry multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromText' function with the specified arguments. multiPolygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geometry multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromText' function with the specified arguments. geometryCollectionWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
            <param name="geometryCollectionWellKnownText">An expression that provides the well known text representation of the geometry collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified binary value.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified arguments. wellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromBinary' function with the specified arguments. pointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
            <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromBinary' function with the specified arguments. lineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
            <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromBinary' function with the specified arguments. polygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
            <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromBinary' function with the specified arguments. multiPointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromBinary' function with the specified arguments. multiLineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromBinary' function with the specified arguments. multiPolygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromBinary' function with the specified arguments. geometryCollectionWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
            <param name="geometryCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
            <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified arguments. geometryMarkup must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography. Its value has the default coordinate system id (SRID) of the underlying provider.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified value.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified arguments. wellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromText' function with the specified arguments.
            </summary>
            <returns>The canonical 'GeographyPointFromText' function.</returns>
            <param name="pointWellKnownText">An expression that provides the well-known text representation of the geography point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownTextValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromText' function with the specified arguments. lineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
            <param name="lineWellKnownText">An expression that provides the well known text representation of the geography line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromText' function with the specified arguments. polygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
            <param name="polygonWellKnownText">An expression that provides the well known text representation of the geography polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromText' function with the specified arguments. multiPointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geography multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromText' function with the specified arguments. multiLineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geography multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromText' function with the specified arguments. multiPolygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geography multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromText' function with the specified arguments. geographyCollectionWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
            <param name="geographyCollectionWellKnownText">An expression that provides the well known text representation of the geography collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified binary value.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified arguments. wellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromBinary' function with the specified arguments. pointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography point value based on the specified values.</returns>
            <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownBinaryValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromBinary' function with the specified arguments. lineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
            <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromBinary' function with the specified arguments. polygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
            <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromBinary' function with the specified arguments. multiPointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromBinary' function with the specified arguments. multiLineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromBinary' function with the specified arguments. multiPolygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromBinary' function with the specified arguments. geographyCollectionWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
            <param name="geographyCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geography collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
            <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified arguments. geographyMarkup must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CoordinateSystemId' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer SRID value from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the coordinate system id (SRID) should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTypeName' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the string Geometry Type name from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the Geometry Type name should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDimension' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the Dimension value from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the Dimension value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEnvelope' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the minimum bounding box for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the value from which the Envelope value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsBinary' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Binary.
            </summary>
            <returns>A new DbFunctionExpression that returns the well known binary representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the well known binary representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsGml' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the Geography Markup Language (GML) representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the Geography Markup Language (GML) representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsText' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the well known text representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the well known text representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsEmptySpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue is empty.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the IsEmptySptiaal value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsSimpleGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue is a simple geometry.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBoundary' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the boundary for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the geometry value from which the SpatialBoundary value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsValidGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue is valid.</returns>
            <param name="geometryValue">An expression that specifies the geometry value which should be tested for spatial validity.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEquals' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 are equal.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for equality.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDisjoint' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 are spatially disjoint.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for disjointness.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersects' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 intersect.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for intersection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTouches' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 touches geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialCrosses' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 crosses geometryValue2 intersect.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialWithin' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 is spatially within geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialContains' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 spatially contains geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialOverlaps' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 spatially overlaps geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialRelate' function with the specified arguments, which must have Edm.Geometry and string result types. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 is spatially related to geometryValue2 according to the spatial relationship designated by intersectionPatternMatrix.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
            <param name="intersectionPatternMatrix">An expression that specifies the text representation of the Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern used to compare geometryValue1 and geometryValue2.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBuffer' function with the specified arguments, which must have a Edm.Geography or Edm.Geometry and Edm.Double result types. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a geometry value representing all points less than or equal to distance from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value.</param>
            <param name="distance">An expression that specifies the buffer distance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Distance' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type.  The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns the distance between the closest points in spatialValue1 and spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value from which the distance from spatialValue1 should be measured.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialConvexHull' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the convex hull for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the geometry value from which the convex hull value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersection' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the spatial value representing the intersection of spatialValue1 and spatialValue2.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the intersection with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialUnion' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the spatial value representing the union of spatialValue1 and spatialValue2.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the union with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the geometry value representing the difference of spatialValue2 with spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the difference with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialSymmetricDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the geometry value representing the symmetric difference of spatialValue2 with spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the symmetric difference with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of elements in spatialValue or null if spatialValue is not a collection.</returns>
            <param name="spatialValue">An expression that specifies the geography or geometry collection value from which the number of elements should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the collection element at position indexValue in spatialValue or null if spatialValue is not a collection.</returns>
            <param name="spatialValue">An expression that specifies the geography or geometry collection value.</param>
            <param name="indexValue">An expression that specifies the position of the element to be retrieved from within the geometry or geography collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'XCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the X co-ordinate value of geometryValue or null if geometryValue is not a point.</returns>
            <param name="geometryValue">An expression that specifies the geometry point value from which the X co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'YCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Y co-ordinate value of geometryValue or null if geometryValue is not a point.</returns>
            <param name="geometryValue">An expression that specifies the geometry point value from which the Y co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Elevation' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the elevation value of spatialValue or null if spatialValue is not a point.</returns>
            <param name="spatialValue">An expression that specifies the spatial point value from which the elevation (Z co-ordinate) value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Measure' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Measure of spatialValue or null if spatialValue is not a point.</returns>
            <param name="spatialValue">An expression that specifies the spatial point value from which the Measure (M) co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Latitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Latitude value of geographyValue or null if geographyValue is not a point.</returns>
            <param name="geographyValue">An expression that specifies the geography point value from which the Latitude value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Longitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Longitude value of geographyValue or null if geographyValue is not a point.</returns>
            <param name="geographyValue">An expression that specifies the geography point value from which the Longitude value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialLength' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the length of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the length should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the start point of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the start point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the end point of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the end point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsClosedSpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether spatialValue is closed, or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the IsClosedSpatial value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsRing' function with the specified argument, which must have an Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether geometryValue is a ring (both closed and simple), or null if geometryValue is not a curve.</returns>
            <param name="geometryValue">An expression that specifies the geometry curve value from which the IsRing value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of points in spatialValue or null if spatialValue is not a line string.</returns>
            <param name="spatialValue">An expression that specifies the spatial line string value from which the number of points should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the point at position indexValue in spatialValue or null if spatialValue is not a line string.</returns>
            <param name="spatialValue">An expression that specifies the spatial line string value.</param>
            <param name="indexValue">An expression that specifies the position of the point to be retrieved from within the line string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Area' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the area of spatialValue or null if spatialValue is not a surface.</returns>
            <param name="spatialValue">An expression that specifies the spatial surface value for which the area should be calculated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Centroid' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the centroid point of geometryValue (which may not be on the surface itself) or null if geometryValue is not a surface.</returns>
            <param name="geometryValue">An expression that specifies the geometry surface value from which the centroid should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointOnSurface' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either a point guaranteed to be on the surface geometryValue or null if geometryValue is not a surface.</returns>
            <param name="geometryValue">An expression that specifies the geometry surface value from which the point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ExteriorRing' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the exterior ring of the polygon geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingCount' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of interior rings in the polygon geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingAt' function with the specified arguments. The first argument must have an Edm.Geometry result type. The second argument must have an integer numeric result types. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the interior ring at position indexValue in geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
            <param name="indexValue">An expression that specifies the position of the interior ring to be retrieved from within the polygon.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
            <summary>
            Ensures that all metadata in a given expression tree is from the specified metadata workspace,
            potentially rebinding and rebuilding the expressions to appropriate replacement metadata where necessary.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> class.</summary>
            <param name="targetWorkspace">The target workspace.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>Implements the visitor pattern for the entity set.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="entitySet">The entity set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>Implements the visitor pattern for the function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="functionMetadata">The function metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Implements the visitor pattern for the type.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>Implements the visitor pattern for the type usage.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>Implements the visitor pattern for retrieving an instance property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
            <summary>
            Represents a boolean expression that tests whether a specified item matches any element in a list.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>
            The visitor pattern method for expression visitors that do not produce a result value.
            </summary>
            <param name="visitor"> An instance of DbExpressionVisitor. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>
            The visitor pattern method for expression visitors that produce a result value of a specific type.
            </summary>
            <param name="visitor"> An instance of a typed DbExpressionVisitor that produces a result value of type TResultType. </param>
            <typeparam name="TResultType">
            The type of the result produced by <paramref name="visitor"/>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/>
            is null
            </exception>
            <returns>
            An instance of <typeparamref name="TResultType"/> .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
            <summary>
            Gets a DbExpression that specifies the item to be matched.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
            <summary>
            Gets the list of DbExpression to test for a match.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
            <summary>
            Represents the retrieval of the key value of the specified Reference as a row.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
            <summary>
            Represents the set union (without duplicate removal) operation between the left and right operands.
            </summary>
            <remarks>
            DbUnionAllExpression requires that its arguments have a common collection result type
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
            <summary>
            Represents a 'scan' of all elements of a given entity set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
            <summary>Gets the metadata for the referenced entity or relationship set.</summary>
            <returns>The metadata for the referenced entity or relationship set.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
            <summary>
            Extension methods for <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
            <summary>
            Gets the conceptual model from the specified DbModel.
            </summary>
            <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
            <returns>An instance of EdmModel that represents the conceptual model.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
            <summary>
            Gets the store model from the specified DbModel.
            </summary>
            <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
            <returns>An instance of EdmModel that represents the store model.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
            <summary>
            An interface to get the underlying store and conceptual model for a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
            <summary>
            Gets the conceptual model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
            <summary>
            Gets the store model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
            <summary>
            Inherit from this class to create a service that allows for code generation of custom annotations as part of 
            scaffolding Migrations. The derived class should be set onto the <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator"/>.
            </summary>
            <remarks>
            Note that an <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> is not needed if the annotation uses a simple string value,
            or if calling ToString on the annotation object is sufficient for use in the scaffolded Migration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Override this method to return additional namespaces that should be included in the code generated for the
            scaffolded migration. The default implementation returns an empty enumeration.
            </summary>
            <param name="annotationNames">The names of the annotations that are being included in the generated code.</param>
            <returns>A list of additional namespaces to include.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Implement this method to generate code for the given annotation value.
            </summary>
            <param name="annotationName">The name of the annotation for which a value is being generated.</param>
            <param name="annotation">The annotation value.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
            <summary>
            Represents a pair of annotation values in a scaffolded or hand-coded <see cref="T:System.Data.Entity.Migrations.DbMigration"/>.
            </summary>
            <remarks>
            Code First allows for custom annotations to be associated with columns and tables in the
            generated model. This class represents a pair of annotation values in a migration such
            that when the Code First model changes the old annotation value and the new annotation
            value can be provided to the migration and used in SQL generation.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new pair of annotation values.
            </summary>
            <param name="oldValue">The old value of the annotation, which may be null if the annotation has just been created.</param>
            <param name="newValue">The new value of the annotation, which may be null if the annotation has been deleted.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
            <summary>
            Returns true if both annotation pairs contain the same values, otherwise false.
            </summary>
            <param name="left">A pair of annotation values.</param>
            <param name="right">A pair of annotation values.</param>
            <returns>True if both pairs contain the same values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
            <summary>
            Returns true if the two annotation pairs contain different values, otherwise false.
            </summary>
            <param name="left">A pair of annotation values.</param>
            <param name="right">A pair of annotation values.</param>
            <returns>True if the pairs contain different values.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
            <summary>
            Gets the old value of the annotation, which may be null if the annotation has just been created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
            <summary>
            Gets the new value of the annotation, which may be null if the annotation has been deleted.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
            <summary>
            Returned by <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> and related methods to indicate whether or
            not one object does not conflict with another such that the two can be combined into one.
            </summary>
            <remarks>
            If the two objects are not compatible then information about why they are not compatible is contained
            in the <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage"/> property.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult"/> instance.
            </summary>
            <param name="isCompatible">Indicates whether or not the two tested objects are compatible.</param>
            <param name="errorMessage">
            An error message indicating how the objects are not compatible. Expected to be null if isCompatible is true.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
            <summary>
            Implicit conversion to a bool to allow the result object to be used directly in checks.
            </summary>
            <param name="result">The object to convert.</param>
            <returns>True if the result is compatible; false otherwise.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
            <summary>
            True if the two tested objects are compatible; otherwise false.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
            <summary>
            If <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible"/> is true, then returns an error message indicating how the two tested objects
            are incompatible.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
            <summary>
            Types used as custom annotations can implement this interface to indicate that an attempt to use
            multiple annotations with the same name on a given table or column may be possible by merging
            the multiple annotations into one.
            </summary>
            <remarks>
            Normally there can only be one custom annotation with a given name on a given table or
            column. If a table or column ends up with multiple annotations, for example, because
            multiple CLR properties map to the same column, then an exception will be thrown.
            However, if the annotation type implements this interface, then the two annotations will be
            checked for compatibility using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> method and, if compatible,
            will be merged into one using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
            <summary>
            Returns true if this annotation does not conflict with the given annotation such that
            the two can be combined together using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)"/> method.
            </summary>
            <param name="other">The annotation to compare.</param>
            <returns>A CompatibilityResult indicating whether or not this annotation is compatible with the other.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
            <summary>
            Merges this annotation with the given annotation and returns a new merged annotation. This method is
            only expected to succeed if <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> returns true.
            </summary>
            <param name="other">The annotation to merge with this one.</param>
            <returns>A new merged annotation.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
            <summary>
            Instances of this class are used as custom annotations for representing database indexes in an
            Entity Framework model.
            </summary>
            <remarks>
            An index annotation is added to a Code First model when an <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> is placed on
            a mapped property of that model. This is used by Entity Framework Migrations to create indexes on
            mapped database columns. Note that multiple index attributes on a property will be merged into a
            single annotation for the column. Similarly, index attributes on multiple properties that map to the
            same column will be merged into a single annotation for the column. This means that one index
            annotation can represent multiple indexes. Within an annotation there can be only one index with any
            given name.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
            <summary>
            The name used when this annotation is stored in Entity Framework metadata or serialized into
            an SSDL/EDMX file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
            <summary>
            Creates a new annotation for the given index.
            </summary>
            <param name="indexAttribute">An index attributes representing an index.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
            <summary>
            Creates a new annotation for the given collection of indexes.
            </summary>
            <param name="indexAttributes">Index attributes representing one or more indexes.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
            <summary>
            Returns true if this annotation does not conflict with the given annotation such that
            the two can be combined together using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)"/> method.
            </summary>
            <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> with a given name.
            Two annotations are considered compatible if each IndexAttribute with a given name is only
            contained in one annotation or the other, or if both annotations contain an IndexAttribute
            with the given name.
            </remarks>
            <param name="other">The annotation to compare.</param>
            <returns>A CompatibilityResult indicating whether or not this annotation is compatible with the other.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
            <summary>
            Merges this annotation with the given annotation and returns a new annotation containing the merged indexes.
            </summary>
            <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> with a given name.
            The merged annotation will contain IndexAttributes from both this and the other annotation.
            If both annotations contain an IndexAttribute with the same name, then the merged annotation
            will contain one IndexAttribute with that name.
            </remarks>
            <param name="other">The annotation to merge with this one.</param>
            <returns>A new annotation with indexes from both annotations merged.</returns>
            <exception cref="T:System.InvalidOperationException">
            The other annotation contains indexes that are not compatible with indexes in this annotation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
            <summary>
            Gets the indexes represented by this annotation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
            <summary>
                This class is used to serialize and deserialize <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> objects so that they
                can be stored in the EDMX form of the Entity Framework model.
            </summary>
            <remarks>
                An example of the serialized format is:
                { Name: 'MyIndex', Order: 7, IsClustered: True, IsUnique: False } { } { Name: 'MyOtherIndex' }.
                Note that properties that have not been explicitly set in an index attribute will be excluded from
                the serialized output. So, in the example above, the first index has all properties specified,
                the second has none, and the third has just the name set.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
            <summary>
            Implement this interface to allow custom annotations represented by <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/> instances to be
            serialized to and from the EDMX XML. Usually a serializer instance is set using the
            <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})"/> method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
            <summary>
            Serializes the given annotation value into a string for storage in the EDMX XML.
            </summary>
            <param name="name">The name of the annotation that is being serialized.</param>
            <param name="value">The value to serialize.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
            <summary>
            Deserializes the given string back into the expected annotation value.
            </summary>
            <param name="name">The name of the annotation that is being deserialized.</param>
            <param name="value">The string to deserialize.</param>
            <returns>The deserialized annotation value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
            <summary>
                Serializes the given <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> into a string for storage in the EDMX XML.
            </summary>
            <param name="name">The name of the annotation that is being serialized.</param>
            <param name="value">The value to serialize which must be an IndexAnnotation object.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
            <summary>
                Deserializes the given string back into an <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> object.
            </summary>
            <param name="name">The name of the annotation that is being deserialized.</param>
            <param name="value">The string to deserialize.</param>
            <returns>The deserialized annotation value.</returns>
            <exception cref="T:System.FormatException">If there is an error reading the serialized value.</exception>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbModelStore">
            <summary>
            Base class for persisted model cache.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModelStore.TryLoad(System.Type)">
            <summary>
            Loads a model from the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <returns>The loaded metadata model.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModelStore.TryGetEdmx(System.Type)">
            <summary>
            Retrieves an edmx XDocument version of the model from the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <returns>The loaded XDocument edmx.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModelStore.Save(System.Type,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Saves a model to the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <param name="model">The metadata model to save.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModelStore.GetDefaultSchema(System.Type)">
            <summary>
            Gets the default database schema used by a model.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <returns>The default database schema.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DefaultDbModelStore">
            <summary>
            Loads or saves models from/into .edmx files at a specified location.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.#ctor(System.String)">
            <summary>
            Initializes a new DefaultDbModelStore instance.
            </summary>
            <param name="directory">The parent directory for the .edmx files.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.TryLoad(System.Type)">
            <summary>
            Loads a model from the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <returns>The loaded metadata model.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.TryGetEdmx(System.Type)">
            <summary>
            Retrieves an edmx XDocument version of the model from the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <returns>The loaded XDocument edmx.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.Save(System.Type,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Saves a model to the store.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <param name="model">The metadata model to save.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.GetFilePath(System.Type)">
            <summary>
            Gets the path of the .edmx file corresponding to the specified context type.
            </summary>
            <param name="contextType">A context type.</param>
            <returns>The .edmx file path.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultDbModelStore.FileIsValid(System.Type,System.String)">
            <summary>
            Validates the model store is valid.
            The default implementation verifies that the .edmx file was last 
            written after the context assembly was last written.
            </summary>
            <param name="contextType">The type of context representing the model.</param>
            <param name="filePath">The path of the stored model.</param>
            <returns>Whether the edmx file should be invalidated.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DefaultDbModelStore.Directory">
            <summary>
            Gets the location of the .edmx files.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
            <summary>
            This interface is implemented by any object that can resolve a dependency, either directly
            or through use of an external container.
            </summary>
            <remarks>
            The public services currently resolved using IDbDependencyResolver are documented here:
            http://msdn.microsoft.com/en-us/data/jj680697
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
            <summary>
            Attempts to resolve a dependency for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return null and not throw. This
            allows resolvers to be used in a Chain of Responsibility pattern such that multiple resolvers
            can be asked to resolve a dependency until one finally does.
            </summary>
            <param name="type"> The interface or abstract base class that defines the dependency to be resolved. The returned object is expected to be an instance of this type. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
            <returns> The resolved dependency, which must be an instance of the given contract type, or null if the dependency could not be resolved. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
            <summary>
            Attempts to resolve a dependencies for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return an empty enumeration and
            not throw. This method differs from <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> in that it returns all registered
            services for the given type and key combination.
            </summary>
            <param name="type"> The interface or abstract base class that defines the dependency to be resolved. Every returned object is expected to be an instance of this type. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
            <returns> All services that resolve the dependency, which must be instances of the given contract type, or an empty enumeration if the dependency could not be resolved. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> implementation used for resolving <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>
            factories.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver"/>
            </summary>
            <param name="transactionHandlerFactory">A function that returns a new instance of a transaction handler.</param>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which the transaction handler will be used.
            <c>null</c> will match anything.
            </param>
            <param name="serverName">
            A string that will be matched against the server name in the connection string. <c>null</c> will match anything.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this method will attempt
            to return the service to use, otherwise it will return <c>null</c>. When the given type is
            <see cref="T:System.Func`1"/>, then the key is expected to be a <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An <see cref="T:System.Func`1"/>, or null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return an empty enumeration. When the given type is
            <see cref="T:System.Func`1"/>, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An enumerable of <see cref="T:System.Func`1"/>, or an empty enumeration.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmxReader">
            <summary>
            Utility class for reading a metadata model from .edmx.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmxReader.Read(System.Xml.XmlReader,System.String)">
            <summary>
            Reads a metadata model from .edmx.
            </summary>
            <param name="reader">XML reader for the .edmx</param>
            <param name="defaultSchema">Default database schema used by the model.</param>
            <returns>The loaded metadata model.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
            <summary>
            Provides utility methods for reading from an App.config or Web.config file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader"/>.
            </summary>
            <param name="configuration">The configuration to read from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
            <summary>
            Gets the specified provider services from the configuration.
            </summary>
            <param name="invariantName">The invariant name of the provider services.</param>
            <returns>The provider services type name, or null if not found.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogger">
            <summary>
            A simple logger for logging SQL and other database operations to the console or a file.
            A logger can be registered in code or in the application's web.config /app.config file.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework loads the application's <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor">
            <summary>
            This is the base interface for all interfaces that provide interception points for various
            different types and operations. For example, see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            Interceptors are registered on the <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)">
            <summary>
            Occurs during EF initialization after the <see cref="T:System.Data.Entity.DbConfiguration"/> has been constructed but just before
            it is locked ready for use. Use this event to inspect and/or override services that have been
            registered before the configuration is locked. Note that an interceptor of this type should be used carefully
            since it may prevent tooling from discovering the same configuration that is used at runtime.
            </summary>
            <remarks>
            Handlers can only be added before EF starts to use the configuration and so handlers should
            generally be added as part of application initialization. Do not access the DbConfiguration
            static methods inside the handler; instead use the the members of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs"/>
            to get current services and/or add overrides.
            </remarks>
            <param name="loadedEventArgs">Arguments to the event that this interceptor mirrors.</param>
            <param name="interceptionContext">Contextual information about the event.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor">
            <summary>
            Creates a new logger that will send log output to the console.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String)">
            <summary>
            Creates a new logger that will send log output to a file. If the file already exists then
            it is overwritten.
            </summary>
            <param name="path">A path to the file to which log output will be written.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new logger that will send log output to a file.
            </summary>
            <param name="path">A path to the file to which log output will be written.</param>
            <param name="append">True to append data to the file if it exists; false to overwrite the file.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose">
            <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose(System.Boolean)">
            <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; False to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StartLogging">
            <summary>
            Starts logging. This method is a no-op if logging is already started.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StopLogging">
            <summary>
            Stops logging. This method is a no-op if logging is not started.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.System#Data#Entity#Infrastructure#Interception#IDbConfigurationInterceptor#Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)">
            <summary>
            Called to start logging during Entity Framework initialization when this logger is registered.
            as an <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>. 
            </summary>
            <param name="loadedEventArgs">Arguments to the event that this interceptor mirrors.</param>
            <param name="interceptionContext">Contextual information about the event.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Note that specific types/operations that can be intercepted may use a more specific
            interception context derived from this class. For example, if SQL is being executed by
            a <see cref="T:System.Data.Entity.DbContext"/>, then the DbContext will be contained in the
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> instance that is passed to the methods
            of <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> by copying state from the given
            interception context. See <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone">
            <summary>
            Call this method when creating a copy of an interception context in order to add new state
            to it. Using this method instead of calling the constructor directly ensures virtual dispatch
            so that the new type will have the same type (and any specialized state) as the context that
            is being cloned.
            </summary>
            <returns>A new context with all state copied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.DbContexts">
            <summary>
            Gets all the <see cref="T:System.Data.Entity.DbContext"/> instances associated with this interception context.
            </summary>
            <remarks>
            This list usually contains zero or one items. However, it can contain more than one item if
            a single <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> has been used to construct multiple <see cref="T:System.Data.Entity.DbContext"/>
            instances.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ObjectContexts">
            <summary>
            Gets all the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> instances associated with this interception context.
            </summary>
            <remarks>
            This list usually contains zero or one items. However, it can contain more than one item when
            EF has created a new <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> for use in database creation and initialization, or
            if a single <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> is used with multiple <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ObjectContexts"/>.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync">
            <summary>
            True if the operation is being executed asynchronously, otherwise false.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
            <summary>
                Implemented by Entity Framework providers and used to check whether or not tables exist
                in a given database. This is used by database initializers when determining whether or not to
                treat an existing database as empty such that tables should be created.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
            <summary>
                When overridden in a derived class checks where the given tables exist in the database
                for the given connection.
            </summary>
            <param name="context">
                The context for which table checking is being performed, usually used to obtain an appropriate
                <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/>.
            </param>
            <param name="connection">
                A connection to the database. May be open or closed; should be closed again if opened. Do not
                dispose.
            </param>
            <param name="modelTables">The tables to check for existence.</param>
            <param name="edmMetadataContextTableName">The name of the EdmMetadata table to check for existence.</param>
            <returns>True if any of the model tables or EdmMetadata table exists.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
            <summary>
                Helper method to get the table name for the given s-space <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet"/>.
            </summary>
            <param name="modelTable">The s-space entity set for the table.</param>
            <returns>The table name.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
            <summary>
            Thrown when an error occurs committing a <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/> class.
            </summary>
            <param name="info">The data necessary to serialize or deserialize an object.</param>
            <param name="context">Description of the source and destination of the specified serialized stream.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
            <summary>
            Event arguments passed to <see cref="E:System.Data.Entity.DbConfiguration.Loaded"/> event handlers.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
            <summary>
            Call this method to add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of
            Responsibility of resolvers that are used to resolve dependencies needed by the Entity Framework.
            </summary>
            <remarks>
            Resolvers are asked to resolve dependencies in reverse order from which they are added. This means
            that a resolver can be added to override resolution of a dependency that would already have been
            resolved in a different way.
            The only exception to this is that any dependency registered in the application's config file
            will always be used in preference to using a dependency resolver added here, unless the
            overrideConfigFile is set to true in which case the resolver added here will also override config
            file settings.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
            <param name="overrideConfigFile">If true, then the resolver added will take precedence over settings in the config file.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method to add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility
            of resolvers that are used to resolve dependencies needed by the Entity Framework. Unlike the AddDependencyResolver
            method, this method puts the resolver at the bottom of the Chain of Responsibility such that it will only
            be used to resolve a dependency that could not be resolved by any of the other resolvers.
            </summary>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
            <summary>
            Adds a wrapping resolver to the configuration that is about to be locked. A wrapping
            resolver is a resolver that incepts a service would have been returned by the resolver
            chain and wraps or replaces it with another service of the same type.
            </summary>
            <typeparam name="TService">The type of service to wrap or replace.</typeparam>
            <param name="serviceInterceptor">A delegate that takes the unwrapped service and key and returns the wrapped or replaced service.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
            <summary>
            Returns a snapshot of the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> that is about to be locked.
            Use the GetService methods on this object to get services that have been registered.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> implementation used for resolving <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>
            factories.
            </summary>
            <remarks>
            This class can be used by <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> to aid in the resolving
            of <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> factories as a default service for the provider.
            </remarks>
            <typeparam name="T">The type of execution strategy that is resolved.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1"/>
            </summary>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
            <param name="serverName">
            A string that will be matched against the server name in the connection string. <c>null</c> will match anything.
            </param>
            <param name="getExecutionStrategy">A function that returns a new instance of an execution strategy.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return null. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An <see cref="T:System.Func`1"/>, or null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return an empty enumeration. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An enumerable of <see cref="T:System.Func`1"/>, or an empty enumeration.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
            <summary>
            Extension methods to call the <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> method using
            a generic type parameter and/or no name.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the generic type of the method and the given
            name as arguments.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <param name="key"> The key of the dependency to resolve. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the given type argument and using
            null for the name argument.
            </summary>
            <param name="resolver"> The resolver to use. </param>
            <param name="type"> The contract type to resolve. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the generic type of the method and the given
            name as arguments.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <param name="key"> The key of the dependency to resolve. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the given type argument and using
            null for the name argument.
            </summary>
            <param name="resolver"> The resolver to use. </param>
            <param name="type"> The contract type to resolve. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
            <summary>
            Implements <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> to resolve a dependency such that it always returns
            the same instance.
            </summary>
            <typeparam name="T"> The type that defines the contract for the dependency that will be resolved. </typeparam>
            <remarks>
            This class is immutable such that instances can be accessed by multiple threads at the same time.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            regardless of the key passed to the Get method.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches exactly the key passed to the Get method.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches the key passed to the Get method based on the given predicate.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
            <param name="keyPredicate"> A predicate that takes the key object and returns true if and only if it matches. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbConnection"/> with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.FindUserState(System.String)">
            <summary>
            Gets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <returns>The user state set, or null if none was found for the given key.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.SetUserState(System.String,System.Object)">
            <summary>
            Sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <param name="value">The state to set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult">
            <summary>
            If execution of the operation completes without throwing, then this property will contain
            the result of the operation. If the operation was suppressed or did not fail, then this property
            will always contain the default value for the generic type.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>
            property are set. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/> property can be set or changed by interceptors,
            while this property will always represent the actual result returned by the operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set result will be returned instead. Otherwise, if the operation succeeds, then
            this property will be set to the returned result. In either case, interceptors that run
            after the operation can change this property to change the result that will be returned.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult"/>
            property are set. However, this property can be set or changed by interceptors, while the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult"/> property will always represent the actual result returned by the
            operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.SuppressExecution"/>, by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> to be thrown, or
            by setting the operation result using <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task`1"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithIsolationLevel(System.Data.IsolationLevel)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel"/>.
            </summary>
            <param name="isolationLevel">The isolation level to associate.</param>
            <returns>A new interception context associated with the given isolation level.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel"/> that will be used or has been used to start a transaction.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter">
            <summary>
            This is the default log formatter used when some <see cref="T:System.Action`1"/> is set onto the <see cref="P:System.Data.Entity.Database.Log"/>
            property. A different formatter can be used by creating a class that inherits from this class and overrides
            some or all methods to change behavior.
            </summary>
            <remarks>
            To set the new formatter create a code-based configuration for EF using <see cref="T:System.Data.Entity.DbConfiguration"/> and then
            set the formatter class to use with <see cref="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})"/>.
            Note that setting the type of formatter to use with this method does change the way command are
            logged when <see cref="P:System.Data.Entity.Database.Log"/> is used. It is still necessary to set a <see cref="T:System.Action`1"/>
            onto <see cref="P:System.Data.Entity.Database.Log"/> before any commands will be logged.
            For more low-level control over logging/interception see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> and
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework executes commands.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>  or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework performs operations on a <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            The transaction used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is set.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is set.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.Database"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.Database"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.DataSource"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.DataSource"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> is invoked.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> is invoked.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ServerVersion"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ServerVersion"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.State"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.State"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework commits or rollbacks a transaction.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.Connection"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.Connection"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Action{System.String})">
            <summary>
            Creates a formatter that will not filter by any <see cref="T:System.Data.Entity.DbContext"/> and will instead log every command
            from any context and also commands that do not originate from a context.
            </summary>
            <remarks>
            This constructor is not used when a delegate is set on <see cref="P:System.Data.Entity.Database.Log"/>. Instead it can be
            used by setting the formatter directly using <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Add(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)"/>.
            </remarks>
            <param name="writeAction">The delegate to which output will be sent.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Data.Entity.DbContext,System.Action{System.String})">
            <summary>
            Creates a formatter that will only log commands the come from the given <see cref="T:System.Data.Entity.DbContext"/> instance.
            </summary>
            <remarks>
            This constructor must be called by a class that inherits from this class to override the behavior
            of <see cref="P:System.Data.Entity.Database.Log"/>.
            </remarks>
            <param name="context">
            The context for which commands should be logged. Pass null to log every command
            from any context and also commands that do not originate from a context.
            </param>
            <param name="writeAction">The delegate to which output will be sent.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Write(System.String)">
            <summary>
            Writes the given string to the underlying write delegate.
            </summary>
            <param name="output">The string to write.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            The stopwatch used to time executions. This stopwatch is started at the end of
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/>, <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/>, and <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/>
            methods and is stopped at the beginning of the <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/>, <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/>,
            and <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> methods. If these methods are overridden and the stopwatch is being used
            then the overrides should either call the base method or start/stop the stopwatch themselves.
            </summary>
            <param name="interceptionContext">The interception context for which the stopwatch will be obtained.</param>
            <returns>The stopwatch.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts the stopwatch returned from
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            The default implementation stopsthe stopwatch returned from <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/> and calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts the stopwatch returned from
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            The default implementation stopsthe stopwatch returned from <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/> and calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>  or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts the stopwatch returned from
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>  or
            one of its async counterparts is made.
            The default implementation stopsthe stopwatch returned from <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/> and calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called whenever a command is about to be executed. The default implementation of this method
            filters by <see cref="T:System.Data.Entity.DbContext"/> set into <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>. This method would typically only be overridden to change the
            context filtering behavior.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command that will be executed.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called whenever a command has completed executing. The default implementation of this method
            filters by <see cref="T:System.Data.Entity.DbContext"/> set into <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogResult``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.  This method would typically only be overridden to change the context
            filtering behavior.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command that was executed.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called to log a command that is about to be executed. Override this method to change how the
            command is logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command to be logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogParameter``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0},System.Data.Common.DbParameter)">
            <summary>
            Called by <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> to log each parameter. This method can be called from an overridden
            implementation of <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> to log parameters, and/or can be overridden to
            change the way that parameters are logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command being logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
            <param name="parameter">The parameter to log.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogResult``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called to log the result of executing a command. Override this method to change how results are
            logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command being logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Does not write to log unless overridden. </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context">
            <summary>
            The context for which commands are being logged, or null if commands from all contexts are
            being logged.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch">
            <summary>
            This property is obsolete. Using it can result in logging incorrect execution times. Call
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetStopwatch(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"/> instead.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbConnection"/> that don't return any results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext">
            <summary>
            Represents contextual information associated with calls that don't return any results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.FindUserState(System.String)">
            <summary>
            Gets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <returns>The user state set, or null if none was found for the given key.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.SetUserState(System.String,System.Object)">
            <summary>
            Sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <param name="value">The state to set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.SuppressExecution"/> or by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> to be thrown
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to property setters of type <typeparamref name="TValue"/> on a <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <typeparam name="TValue">The type of the target property.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to property setters of type <typeparamref name="TValue"/>.
            </summary>
            <remarks>
            An instance of this class is passed to the dispatch methods and does not contain mutable information such as
            the result of the operation. This mutable information is obtained from the <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/>
            that is passed to the interceptors. Instances of this class are publicly immutable. To add contextual information
            use one of the With... or As... methods to create a new interception context containing the new information.
            </remarks>
            <typeparam name="TValue">The type of the target property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.FindUserState(System.String)">
            <summary>
            Gets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <returns>The user state set, or null if none was found for the given key.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.SetUserState(System.String,System.Object)">
            <summary>
            Sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <param name="value">The state to set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithValue(`0)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given property value.
            </summary>
            <param name="value">The value that will be assigned to the target property.</param>
            <returns>A new interception context associated with the given property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Value">
            <summary>
            The value that will be assigned to the target property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.SuppressExecution"/> or by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> to be thrown
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithValue(`0)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the given property value.
            </summary>
            <param name="value">The value that will be assigned to the target property.</param>
            <returns>A new interception context associated with the given property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbCommand"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when executing commands. It is provided publicly so that
            code that runs outside of the core EF assemblies can opt-in to command interception/tracing. This is
            typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Scalar(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQueryAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ScalarAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ReaderAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            implementations.
            </summary>
            <remarks>
            An instance of this class is passed to the dispatch methods of <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher"/>
            and does not contain mutable information such as the result of the operation. This mutable information
            is obtained from the <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that is passed to the interceptors.
            Instances of this class are publicly immutable. To add contextual information use one of the
            With... or As... methods to create a new interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithCommandBehavior(System.Data.CommandBehavior)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior"/>.
            </summary>
            <param name="commandBehavior">The command behavior to associate.</param>
            <returns>A new interception context associated with the given command behavior.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior"/> that will be used or has been used to execute the command with a
            <see cref="T:System.Data.Common.DbDataReader"/>. This property is only used for <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>
            and its async counterparts.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            implementations including the result of the operation.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.FindUserState(System.String)">
            <summary>
            Gets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <returns>The user state set, or null if none was found for the given key.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SetUserState(System.String,System.Object)">
            <summary>
            Sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <param name="value">The state to set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithCommandBehavior(System.Data.CommandBehavior)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the given <see cref="T:System.Data.CommandBehavior"/>.
            </summary>
            <param name="commandBehavior">The command behavior to associate.</param>
            <returns>A new interception context associated with the given command behavior.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult">
            <summary>
            If execution of the operation completes without throwing, then this property will contain
            the result of the operation. If the operation was suppressed or did not fail, then this property
            will always contain the default value for the generic type.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>
            property are set. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/> property can be set or changed by interceptors,
            while this property will always represent the actual result returned by the operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set result will be returned instead. Otherwise, if the operation succeeds, then
            this property will be set to the returned result. In either case, interceptors that run
            after the operation can change this property to change the result that will be returned.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult"/>
            property are set. However, this property can be set or changed by interceptors, while the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult"/> property will always represent the actual result returned by the
            operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SuppressExecution"/>, by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> to be thrown, or
            by setting the operation result using <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task`1"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor">
            <summary>
            Base class that implements <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>. This class is a convenience for
            use when only one or two methods of the interface actually need to have any implementation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.FindUserState(System.String)">
            <summary>
            Gets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <returns>The user state set, or null if none was found for the given key.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.SetUserState(System.String,System.Object)">
            <summary>
            Sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
            <param name="key">A key used to identify the user state.</param>
            <param name="value">The state to set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult">
            <summary>
            The original tree created by Entity Framework. Interceptors can change the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result"/> property to change the tree that will be used, but the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult"/> will always be the tree created by Entity Framework.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result">
            <summary>
            The command tree that will be used by Entity Framework. This starts as the tree contained in the 
            the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult"/> property but can be set by interceptors to change
            the tree that will be used by Entity Framework.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbConnection"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when interacting with <see cref="T:System.Data.Common.DbConnection"/>.
            It is provided publicly so that code that runs outside of the core EF assemblies can opt-in to command
            interception/tracing. This is typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.BeginTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Close(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.Close"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Dispose(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.ComponentModel.Component.Dispose"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetConnectionString(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.SetConnectionString(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            setting <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Information about the context of the call being made, including the value to be set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetConnectionTimeout(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetDatabase(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.Database"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetDataSource(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.DataSource"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.EnlistTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.Open"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.OpenAsync(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext,System.Threading.CancellationToken)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.Open"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetServerVersion(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ServerVersion"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetState(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.State"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbDispatchers">
            <summary>
            Provides access to all dispatchers through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Command">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Transaction">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Connection">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterception">
            <summary>
            This is the registration point for <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> interceptors. Interceptors
            receive notifications when EF performs certain operations such as executing commands against
            the database. For example, see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Add(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Registers a new <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> to receive notifications. Note that the interceptor
            must implement some interface that extends from <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> to be useful.
            </summary>
            <param name="interceptor">The interceptor to add.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Remove(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Removes a registered <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> so that it will no longer receive notifications.
            If the given interceptor is not registered, then this is a no-op.
            </summary>
            <param name="interceptor">The interceptor to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch">
            <summary>
            This is the entry point for dispatching to interceptors. This is usually only used internally by
            Entity Framework but it is provided publicly so that other code can make sure that registered
            interceptors are called when operations are performed on behalf of EF. For example, EF providers
            a may make use of this when executing commands.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbTransaction"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when interacting with <see cref="T:System.Data.Common.DbTransaction"/>.
            It is provided publicly so that code that runs outside of the core EF assemblies can opt-in to command
            interception/tracing. This is typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetConnection(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.Connection"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetIsolationLevel(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Commit(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Commit"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Dispose(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Dispose"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Rollback(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Rollback"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbTransaction"/> that don't return any results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="connection">The connection on which the transaction was started.</param>
            <returns>A new interception context that also contains the connection on which the transaction was started.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Connection">
            <summary>
            The connection on which the transaction was started
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbTransaction"/> with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithTransaction(System.Transactions.Transaction)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to be used in the <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> invocation.</param>
            <returns>A new interception context associated with the given isolation level.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction"/> that will be used or has been used to enlist a connection.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework creates <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree"/> command trees.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor.TreeCreated(System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext)">
            <summary>
            This method is called after a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree"/> has been created.
            The tree that is used after interception can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result"/> while intercepting.
            </summary>
            <remarks>
            Command trees are created for both queries and insert/update/delete commands. However, query
            command trees are cached by model which means that command tree creation only happens the
            first time a query is executed and this notification will only happen at that time
            </remarks>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
            <summary>
            Represents a mapping view.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/> instance having the specified entity SQL.
            </summary>
            <param name="entitySql">A string that specifies the entity SQL.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
            <summary>
            Gets the entity SQL.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
            <summary>
            Base abstract class for mapping view cache implementations.
            Derived classes must have a parameterless constructor if used with <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>
            Gets a view corresponding to the specified extent.
            </summary>
            <param name="extent">An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase"/> that specifies the extent.</param>
            <returns>A <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/> that specifies the mapping view, 
            or null if the extent is not associated with a mapping view.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
            <summary>
            Gets a hash value computed over the mapping closure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
            <summary>
            Specifies the means to create concrete <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/> instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
            <summary>
            Creates a generated view cache instance for the container mapping specified by
            the names of the mapped containers.
            </summary>
            <param name="conceptualModelContainerName">The name of a container in the conceptual model.</param>
            <param name="storeModelContainerName">The name of a container in the store model.</param>
            <returns>
            A <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/> that specifies the generated view cache.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
            <summary>
            Defines a custom attribute that specifies the mapping view cache type (subclass of <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/>)
            associated with a context type (subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>).
            The cache type is instantiated at runtime and used to retrieve pre-generated views in the
            corresponding context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/>  instance that associates a context type
            with a mapping view cache type.
            </summary>
            <param name="contextType">
            A subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="cacheType">
            A subclass of <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/>.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/> instance that associates a context type
            with a mapping view cache type.
            </summary>
            <param name="contextType">
            A subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="cacheTypeName">The assembly qualified full name of the cache type.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
            <summary>
            The base class for interceptors that handle the transaction operations. Derived classes can be registered using
            <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})"/> or
            <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> class.
            </summary>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Initializes this instance using the specified context.
            </summary>
            <param name="context">The context for which transaction operations will be handled.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
            <summary>
            Initializes this instance using the specified context.
            </summary>
            <param name="context">The context for which transaction operations will be handled.</param>
            <param name="connection">The connection to use for the initialization.</param>
            <remarks>
            This method is called by migrations. It is important that no action is performed on the
            specified context that causes it to be initialized.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this transaction handler.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Checks whether the supplied interception context contains the target context
            or the supplied connection is the same as the one used by the target context.
            </summary>
            <param name="connection">A connection.</param>
            <param name="interceptionContext">An interception context.</param>
            <returns>
            <c>true</c> if the supplied interception context contains the target context or
            the supplied connection is the same as the one used by the target context if
            the supplied interception context doesn't contain any contexts; <c>false</c> otherwise.
            </returns>
            <remarks>
            Note that calling this method will trigger initialization of any DbContext referenced from the <paramref name="interceptionContext"/>
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
            <summary>
            When implemented in a derived class returns the script to prepare the database
            for this transaction handler.
            </summary>
            <returns>A script to change the database schema for this transaction handler.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
            <summary>
            Gets the context.
            </summary>
            <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext"/> for which the transaction operations will be handled.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
            <summary>
            Gets the context.
            </summary>
            <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext"/> for which the transaction operations will be handled, could be null.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The <see cref="T:System.Data.Common.DbConnection"/> for which the transaction operations will be handled.
            </value>
            <remarks>
            This connection object is only used to determine whether a particular operation needs to be handled
            in cases where a context is not available.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this transaction handler is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
            <summary>
            This class is used by <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> to write and read transaction tracing information
            from the database.
            To customize the definition of the transaction table you can derive from
            this class and override <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)"/>. Derived classes can be registered
            using <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
            <remarks>
            By default EF will poll the resolved <see cref="T:System.Data.Entity.Infrastructure.TransactionContext"/> to check wether the database schema is compatible and
            will try to modify it accordingly if it's not. To disable this check call
            <code>Database.SetInitializer&lt;TTransactionContext&gt;(null)</code> where TTransactionContext is the type of the resolved context.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.DbContext">
            <summary>
            A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that
            it can be used to query from a database and group together changes that will then be written
            back to the store as a unit.
            DbContext is conceptually similar to ObjectContext.
            </summary>
            <remarks>
            DbContext is usually used with a derived type that contains <see cref="T:System.Data.Entity.DbSet`1"/> properties for
            the root entities of the model. These sets are automatically initialized when the
            instance of the derived class is created.  This behavior can be modified by applying the
            <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute"/>  attribute to either the entire derived context
            class, or to individual properties on the class.
            The Entity Data Model backing the context can be specified in several ways.  When using the Code First
            approach, the <see cref="T:System.Data.Entity.DbSet`1"/> properties on the derived context are used to build a model
            by convention.  The protected OnModelCreating method can be overridden to tweak this model.  More
            control over the model used for the Model First approach can be obtained by creating a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>
            explicitly from a <see cref="T:System.Data.Entity.DbModelBuilder"/> and passing this model to one of the DbContext constructors.
            When using the Database First or Model First approach the Entity Data Model can be created using the
            Entity Designer (or manually through creation of an EDMX file) and then this model can be specified using
            entity connection string or an <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> object.
            The connection to the database (including the name of the database) can be specified in several ways.
            If the parameterless DbContext constructor is called from a derived context, then the name of the derived context
            is used to find a connection string in the app.config or web.config file.  If no connection string is found, then
            the name is passed to the DefaultConnectionFactory registered on the <see cref="T:System.Data.Entity.Database"/> class.  The connection
            factory then uses the context name as the database name in a default connection string.  (This default connection
            string points to .\SQLEXPRESS on the local machine unless a different DefaultConnectionFactory is registered.)
            Instead of using the derived context name, the connection/database name can also be specified explicitly by
            passing the name to one of the DbContext constructors that takes a string.  The name can also be passed in
            the form "name=myname", in which case the name must be found in the config file or an exception will be thrown.
            Note that the connection found in the app.config or web.config file can be a normal database connection
            string (not a special Entity Framework connection string) in which case the DbContext will use Code First.
            However, if the connection found in the config file is a special Entity Framework connection string, then the
            DbContext will use Database/Model First and the model specified in the connection string will be used.
            An existing or explicitly created DbConnection can also be used instead of the database/connection name.
            A <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> can be applied to a class derived from DbContext to set the
            version of conventions used by the context when it creates a model. If no attribute is applied then the
            latest version of conventions will be used.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
            <summary>
            Interface implemented by objects that can provide an <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext"/> instance.
            The <see cref="T:System.Data.Entity.DbContext"/> class implements this interface to provide access to the underlying
            ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
            <summary>
            Gets the object context.
            </summary>
            <value> The object context. </value>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made.  The by-convention name is the full name (namespace + class name)
            of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made, and initializes it from the given model.
            The by-convention name is the full name (namespace + class name) of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="model"> The model that will back this context. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString"> Either the database name or a connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made, and initializes it from the given model.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString"> Either the database name or a connection string. </param>
            <param name="model"> The model that will back this context. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database.
            The connection will not be disposed when the context is disposed if <paramref name="contextOwnsConnection" />
            is <c>false</c>.
            </summary>
            <param name="existingConnection"> An existing connection to use for the new context. </param>
            <param name="contextOwnsConnection">
            If set to <c>true</c> the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database,
            and initializes it from the given model.
            The connection will not be disposed when the context is disposed if <paramref name="contextOwnsConnection" />
            is <c>false</c>.
            </summary>
            <param name="existingConnection"> An existing connection to use for the new context. </param>
            <param name="model"> The model that will back this context. </param>
            <param name="contextOwnsConnection">
                If set to <c>true</c> the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
            <summary>
            Constructs a new context instance around an existing ObjectContext.
            </summary>
            <param name="objectContext"> An existing ObjectContext to wrap with the new context. </param>
            <param name="dbContextOwnsObjectContext">
                If set to <c>true</c> the ObjectContext is disposed when the DbContext is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
            classes directly.
            </remarks>
            <param name="modelBuilder"> The builder that defines the model for the context being created. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set``1">
            <summary>
            Returns a <see cref="T:System.Data.Entity.DbSet`1"/> instance for access to entities of the given type in the context
            and the underlying store.
            </summary>
            <remarks>
            Note that Entity Framework requires that this method return the same instance each time that it is called
            for a given context instance and entity type. Also, the non-generic <see cref="T:System.Data.Entity.DbSet"/> returned by the
            <see cref="M:System.Data.Entity.DbContext.Set(System.Type)"/> method must wrap the same underlying query and set of entities. These invariants must
            be maintained if this method is overridden for anything other than creating test doubles for unit testing.
            See the <see cref="T:System.Data.Entity.DbSet`1"/> class for more details.
            </remarks>
            <typeparam name="TEntity"> The type entity for which a set should be returned. </typeparam>
            <returns> A set for the given entity type. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
            <summary>
            Returns a non-generic <see cref="T:System.Data.Entity.DbSet"/> instance for access to entities of the given type in the context
            and the underlying store.
            </summary>
            <param name="entityType"> The type of entity for which a set should be returned. </param>
            <returns> A set for the given entity type. </returns>
            <remarks>
            Note that Entity Framework requires that this method return the same instance each time that it is called
            for a given context instance and entity type. Also, the generic <see cref="T:System.Data.Entity.DbSet`1"/> returned by the
            <see cref="M:System.Data.Entity.DbContext.Set(System.Type)"/> method must wrap the same underlying query and set of entities. These invariants must
            be maintained if this method is overridden for anything other than creating test doubles for unit testing.
            See the <see cref="T:System.Data.Entity.DbSet"/> class for more details.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns> 
            The number of state entries written to the underlying database. This can include
            state entries for entities and/or relationships. Relationship state entries are created for 
            many-to-many relationships and relationships where there is no foreign key property
            included in the entity class (often referred to as independent associations).
            </returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            A database command did not affect the expected number of rows. This usually indicates an optimistic 
            concurrency violation; that is, a row has been changed in the database since it was queried.
            </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
            The save was aborted because validation of entity property values failed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            An attempt was made to use unsupported behavior such as executing multiple asynchronous commands concurrently
            on the same context instance.</exception>
            <exception cref="T:System.ObjectDisposedException">The context or connection have been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
            Some error occurred attempting to process entities in the context either before or after sending commands
            to the database.
            </exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
            <summary>
            Asynchronously saves all changes made in this context to the underlying database.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <returns>
            A task that represents the asynchronous save operation.
            The task result contains the number of state entries written to the underlying database. This can include
            state entries for entities and/or relationships. Relationship state entries are created for 
            many-to-many relationships and relationships where there is no foreign key property
            included in the entity class (often referred to as independent associations).
            </returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            A database command did not affect the expected number of rows. This usually indicates an optimistic 
            concurrency violation; that is, a row has been changed in the database since it was queried.
            </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
            The save was aborted because validation of entity property values failed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            An attempt was made to use unsupported behavior such as executing multiple asynchronous commands concurrently
            on the same context instance.</exception>
            <exception cref="T:System.ObjectDisposedException">The context or connection have been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
            Some error occurred attempting to process entities in the context either before or after sending commands
            to the database.
            </exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves all changes made in this context to the underlying database.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous save operation.
            The task result contains the number of state entries written to the underlying database. This can include
            state entries for entities and/or relationships. Relationship state entries are created for 
            many-to-many relationships and relationships where there is no foreign key property
            included in the entity class (often referred to as independent associations).
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
            <summary>
            Validates tracked entities and returns a Collection of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation results.
            </summary>
            <returns> Collection of validation results for invalid entities. The collection is never null and must not contain null values or results for valid entities. </returns>
            <remarks>
            1. This method calls DetectChanges() to determine states of the tracked entities unless
            DbContextConfiguration.AutoDetectChangesEnabled is set to false.
            2. By default only Added on Modified entities are validated. The user is able to change this behavior
            by overriding ShouldValidateEntity method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
            Extension point allowing the user to override the default behavior of validating only
            added and modified entities.
            </summary>
            <param name="entityEntry"> DbEntityEntry instance that is supposed to be validated. </param>
            <returns> true to proceed with validation; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Extension point allowing the user to customize validation of an entity or filter out validation results.
            Called by <see cref="M:System.Data.Entity.DbContext.GetValidationErrors"/>.
            </summary>
            <param name="entityEntry"> DbEntityEntry instance to be validated. </param>
            <param name="items">
            User-defined dictionary containing additional info for custom validation. It will be passed to
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            and will be exposed as
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>
            . This parameter is optional and can be null.
            </param>
            <returns> Entity validation result. Possibly null when overridden. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity. </param>
            <returns> An entry for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> An entry for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose">
            <summary>
            Calls the protected Dispose method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
            <summary>
            Disposes the context. The underlying <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            The connection to the database (<see cref="T:System.Data.Common.DbConnection"/> object) is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.DbContext.Database">
            <summary>
            Creates a Database instance for this context that allows for creation/deletion/existence checks
            for the underlying database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
            <summary>
            Returns the Entity Framework ObjectContext that is underlying this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.DbContext.ChangeTracker">
            <summary>
            Provides access to features of the context that deal with change tracking of entities.
            </summary>
            <value> An object used to access features that deal with change tracking. </value>
        </member>
        <member name="P:System.Data.Entity.DbContext.Configuration">
            <summary>
            Provides access to configuration options for the context.
            </summary>
            <value> An object used to access configuration options. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionContext"/> class.
            </summary>
            <param name="existingConnection">The connection used by the context for which the transactions will be recorded.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
            <summary>
            Gets or sets a <see cref="T:System.Data.Entity.DbSet`1"/> that can be used to read and write <see cref="T:System.Data.Entity.Infrastructure.TransactionRow"/> instances.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
            <summary>
            A transaction handler that allows to gracefully recover from connection failures
            during transaction commit by storing transaction tracing information in the database.
            It needs to be registered by using <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})"/>.
            </summary>
            <remarks>
            This transaction handler uses <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/> to store the transaction information
            the schema used can be configured by creating a class derived from <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/>
            that overrides <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)"/> and passing it to the constructor of this class.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> class using the default <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/>.
            </summary>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> class.
            </summary>
            <param name="transactionContextFactory">The transaction context factory.</param>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.GetExecutionStrategy">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> to use for quering the transaction log.
            If null the default will be used.
            </summary>
            <returns> An <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> instance or null. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Stores the tracking information for the new transaction to the database in the same transaction.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            If there was an exception thrown checks the database for this transaction and rethrows it if not found.
            Otherwise marks the commit as succeeded and queues the transaction information to be deleted.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Stops tracking the transaction that was rolled back.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Stops tracking the transaction that was disposed.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
            <summary>
            Removes all the transaction history.
            </summary>
            <remarks>
            This method should only be invoked when there are no active transactions to remove any leftover history
            that was not deleted due to catastrophic failures
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
            <summary>
            Asynchronously removes all the transaction history.
            </summary>
            <remarks>
            This method should only be invoked when there are no active transactions to remove any leftover history
            that was not deleted due to catastrophic failures
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes all the transaction history.
            </summary>
            <remarks>
            This method should only be invoked when there are no active transactions to remove any leftover history
            that was not deleted due to catastrophic failures
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
            <summary>
            Adds the specified transaction to the list of transactions that can be removed from the database
            </summary>
            <param name="transaction">The transaction to be removed from the database.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
            <summary>
            Removes the transactions marked for deletion.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
            <summary>
            Asynchronously removes the transactions marked for deletion.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes the transactions marked for deletion.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
            <summary>
            Removes the transactions marked for deletion if their number exceeds <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </summary>
            <param name="force">
            if set to <c>true</c> will remove all the old transactions even if their number does not exceed <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </param>
            <param name="useExecutionStrategy">
            if set to <c>true</c> the operation will be executed using the associated execution strategy
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes the transactions marked for deletion if their number exceeds <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </summary>
            <param name="force">
            if set to <c>true</c> will remove all the old transactions even if their number does not exceed <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </param>
            <param name="useExecutionStrategy">
            if set to <c>true</c> the operation will be executed using the associated execution strategy
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> associated with the <paramref name="context"/> if there is one;
            otherwise returns <c>null</c>.
            </summary>
            <param name="context">The context</param>
            <returns>The associated <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/>.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> associated with the <paramref name="context"/> if there is one;
            otherwise returns <c>null</c>.
            </summary>
            <param name="context">The context</param>
            <returns>The associated <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
            <summary>
            Gets the transaction context.
            </summary>
            <value>
            The transaction context.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.Transactions">
            <summary>
            The map between the store transactions and the transaction tracking objects
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
            <summary>
            Gets the number of transactions to be executed on the context before the transaction log will be cleaned.
            The default value is 20.
            </summary>
        </member>
        <member name="T:System.Data.Entity.IDatabaseInitializer`1">
            <summary>
            An implementation of this interface is used to initialize the underlying database when
            an instance of a <see cref="T:System.Data.Entity.DbContext"/> derived class is used for the first time.
            This initialization can conditionally create the database and/or seed it with data.
            The strategy used is set using the static InitializationStrategy property of the
            <see cref="T:System.Data.Entity.Database"/> class.
            The following implementations are provided: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1"/>,
            <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1"/>, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context"> The context. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
            <summary>
            Rrepresents a transaction
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
            <summary>
            A unique id assigned to a transaction object.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
            <summary>
            The local time when the transaction was started.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
             <summary>
             Helper class that is used to configure a parameter.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Binary data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="maxLength"> The maximum allowable length of the array data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Boolean data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Byte data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass DateTime data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Decimal data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The numeric precision of the parameter. </param>
             <param name="scale"> The numeric scale of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Double data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass GUID data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Single data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Short data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Integer data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Long data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass String data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="maxLength"> The maximum allowable length of the string data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="unicode"> Value indicating whether or not the parameter supports Unicode content. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Time data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass DateTimeOffset data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass geography data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass geometry data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
             <summary>
             Represents altering an existing stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
             <summary>
             A migration operation that affects stored procedures.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
             <summary>
             Represents an operation to modify a database schema.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the MigrationOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments">
             Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue"
             }'.
             </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
            <summary>
            Gets additional arguments that may be processed by providers.
            
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
            (such as the end user of an application). If input is accepted from such sources it should be validated 
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure.</param>
             <param name="bodySql">The body of the stored procedure expressed in SQL.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure.
            </summary>
            <value>
            The name of the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
            <summary>
            Gets the body of the stored procedure expressed in SQL.
            </summary>
            <value>
            The body of the stored procedure expressed in SQL.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
            <summary>
            Gets the parameters of the stored procedure.
            </summary>
            <value>
            The parameters of the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure.</param>
             <param name="bodySql">The body of the stored procedure expressed in SQL.</param>
             <param name="anonymousArguments">Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.</param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation. 
            Always returns a <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
            <summary>
            Represents changes made to custom annotations on a table.
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
            (such as the end user of an application). If input is accepted from such sources it should be validated
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
            <summary>
            Initializes a new instance of the AlterTableOperation class.
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
            (such as the end user of an application). If input is accepted from such sources it should be validated
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
            <param name="name"> Name of the table on which annotations have changed. </param>
            <param name="annotations">The custom annotations on the table that have changed.</param>
            <param name="anonymousArguments">
            Additional arguments that may be processed by providers. Use anonymous type syntax to
            specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
            <summary>
            Gets the name of the table on which annotations have changed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
            <summary>
            Gets the columns to be included in the table for which annotations have changed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
            <summary>
            Gets the custom annotations that have changed on the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
            <summary>
            Gets an operation that is the inverse of this one such that annotations will be changed back to how
            they were before this operation was applied.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
             <summary>
             Represents renaming an existing index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the RenameIndexOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> Name of the table the index belongs to. </param>
             <param name="name"> Name of the index to be renamed. </param>
             <param name="newName"> New name for the index. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
            <summary>
            Gets the name of the table the index belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
            <summary>
            Gets the name of the index to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
            <summary>
            Gets the new name for the index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
            <summary>
            Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
             <summary>
             Used when scripting an update database operation to store the operations that would have been performed against the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="historyQueryTrees">
             The queries used to determine if this migration needs to be applied to the database. 
             This is used to generate an idempotent SQL script that can be run against a database at any version.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
             <summary>
             Adds a migration to this update database operation.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="migrationId">The id of the migration.</param>
             <param name="operations">The individual operations applied by the migration.</param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
            <summary>
            The queries used to determine if this migration needs to be applied to the database. 
            This is used to generate an idempotent SQL script that can be run against a database at any version.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
            <summary>
            Gets the migrations applied during the update database operation.
            </summary>
            <value>
            The migrations applied during the update database operation.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if any of the operations may result in data loss.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
            <summary>
            Represents a migration to be applied to the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
            <summary>
            Gets the id of the migration.
            </summary>
            <value>
            The id of the migration.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
            <summary>
            Gets the individual operations applied by this migration.
            </summary>
            <value>
            The individual operations applied by this migration.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
             <summary>
             Represents moving a stored procedure to a new schema in the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to move.</param>
             <param name="newSchema">The new schema for the stored procedure.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to move.
            </summary>
            <value>
            The name of the stored procedure to move.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
            <summary>
            Gets the new schema for the stored procedure.
            </summary>
            <value>
            The new schema for the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
             <summary>
             Represents renaming a stored procedure in the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to rename.</param>
             <param name="newName">The new name for the stored procedure.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to rename.
            </summary>
            <value>
            The name of the stored procedure to rename.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
            <summary>
            Gets the new name for the stored procedure.
            </summary>
            <value>
            The new name for the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
            <summary>
            Represents a migration operation that can not be performed, possibly because it is not supported by the targeted database provider.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
             <summary>
             Represents information about a parameter.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
             <summary>
             Represents information about a property of an entity.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
             <summary>
             Initializes a new instance of the PropertyModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this property model. </param>
             <param name="typeUsage"> Additional details about the data type. This includes details such as maximum length, nullability etc. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
            <summary>
            Gets the data type for this property model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
            <summary>
            Gets additional details about the data type of this property model.
            This includes details such as maximum length, nullability etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
             <summary>
             Gets or sets the name of the property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
             <summary>
             Gets or sets a provider specific data type to use for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
            <summary>
            Gets or sets the maximum length for this property model.
            Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
            <summary>
            Gets or sets the precision for this property model.
            Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
            <summary>
            Gets or sets the scale for this property model.
            Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
             <summary>
             Gets or sets a constant value to use as the default value for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
             <summary>
             Gets or sets a SQL expression used as the default value for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
            <summary>
            Gets or sets a value indicating if this property model is fixed length.
            Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
            <summary>
            Gets or sets a value indicating if this property model supports Unicode characters.
            Only valid for textual data types.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
             <summary>
             Initializes a new instance of the ParameterModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this parameter. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
             <summary>
             Initializes a new instance of the ParameterModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this parameter. </param>
             <param name="typeUsage"> Additional details about the data type. This includes details such as maximum length, nullability etc. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
            <summary>
            Gets or sets a value indicating whether this instance is out parameter.
            </summary>
            <value>
            <c>true</c> if this instance is out parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
             <summary>
             Drops a stored procedure from the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to drop.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to drop.
            </summary>
            <value>
            The name of the stored procedure to drop.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation. 
            Always returns a <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration">
            <summary>
            Configures an index.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration.IsUnique">
            <summary>
            Configures the index to be unique.
            </summary>
            <returns> The same IndexConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration.IsUnique(System.Boolean)">
            <summary>
            Configures whether the index will be unique.
            </summary>
            <param name="unique"> Value indicating if the index should be unique or not. </param>
            <returns> The same IndexConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration.IsClustered">
            <summary>
            Configures the index to be clustered.
            </summary>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration.IsClustered(System.Boolean)">
            <summary>
            Configures whether or not the index will be clustered.
            </summary>
            <param name="clustered"> Value indicating if the index should be clustered or not. </param>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration.HasName(System.String)">
            <summary>
            Configures the index to have a specific name.
            </summary>
            <param name="name"> Value indicating what the index name should be.</param>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration">
            <summary>
            Configures a primary key index.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration.IsClustered">
            <summary>
            Configures the index to be clustered.
            </summary>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration.IsClustered(System.Boolean)">
            <summary>
            Configures whether or not the index will be clustered.
            </summary>
            <param name="clustered"> Value indicating if the index should be clustered or not. </param>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration.HasName(System.String)">
            <summary>
            Configures the index to have a specific name.
            </summary>
            <param name="name"> Value indicating what the index name should be.</param>
            <returns> The same IndexConfigurationBase instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            Filters the entity types that this convention applies to based on a
            predicate.
            </summary>
            <param name="predicate"> A function to test each entity type for a condition. </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
            <summary>
            Filters the entity types that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
            <typeparam name="T"> Type of the captured value. </typeparam>
            <param name="capturingPredicate">
            A function to capture a value for each entity type. If the value is null, the
            entity type will be filtered out.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/>
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model that inherit from a common, specified type.
            </summary>
            <typeparam name="T"> The common type of the entity types that this convention applies to. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            Filters the entity types that this convention applies to based on a
            predicate.
            </summary>
            <param name="predicate"> A function to test each entity type for a condition. </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
            <summary>
            Filters the entity types that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
            <typeparam name="TValue"> Type of the captured value. </typeparam>
            <param name="capturingPredicate">
            A function to capture a value for each entity type. If the value is null, the
            entity type will be filtered out.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/>
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model that inherit from a common, specified type and a
            captured value.
            </summary>
            <typeparam name="T"> The common type of the entity types that this convention applies to. </typeparam>
            <typeparam name="TValue"> Type of the captured value. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/>
            using a captured value.
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model and a captured value.
            </summary>
            <typeparam name="T"> Type of the captured value. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/>
            using a captured value.
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
            <summary>
            Allows configuration to be performed for an entity type in a model.
            This configuration functionality is available via lightweight conventions.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
            <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
            <param name="entitySetName"> The name of the entity set. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
            <summary>
            Excludes this entity type from the model so that it will not be mapped to the database.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
            <summary>
            Changes this entity type to a complex type.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect if the property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <param name="propertyInfo"> The property to be configured. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect if the property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <param name="propertyName"> The name of the property being configured. </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <param name="propertyInfo"> The property being configured. </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
            <summary>
            Configures the primary key property for this entity type.
            </summary>
            <param name="propertyName"> The name of the property to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
            <summary>
            Configures the primary key property for this entity type.
            </summary>
            <param name="propertyInfo"> The property to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <param name="propertyNames"> The names of the properties to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <param name="keyProperties"> The properties to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured or if any
            property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schemaName"> The database schema of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
            <param name="modificationStoredProceduresConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
            <summary>
            Gets the <see cref="T:System.Type"/> of this entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
            <summary>
            Allows configuration to be performed for an entity type in a model.
            This configuration functionality is available via lightweight conventions.
            </summary>
            <typeparam name="T"> A type inherited by the entity type. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
            <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
            <param name="entitySetName"> The name of the entity set. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
            <summary>
            Excludes this entity type from the model so that it will not be mapped to the database.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
            <summary>
            Changes this entity type to a complex type.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <typeparam name="TProperty"> The type of the property to be ignored. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <typeparam name="TProperty"> The type of the key. </typeparam>
            <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t =&gt; t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t =&gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schemaName"> The database schema of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
            <param name="modificationStoredProceduresConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
            <summary>
            Gets the <see cref="T:System.Type"/> of this entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
            <summary>
            Identifies conventions that can be added to or removed from a <see cref="T:System.Data.Entity.DbModelBuilder"/> instance.
            </summary>
            <remarks>
            Note that implementations of this interface must be immutable.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
            <summary>
            A general purpose class for Code First conventions that read attributes from .NET properties
            and generate column annotations based on those attributes.
            </summary>
            <typeparam name="TAttribute">The type of attribute to discover.</typeparam>
            <typeparam name="TAnnotation">The type of annotation that will be created.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
            <summary>
            A convention that doesn't override configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
            <summary>
            The derived class can use the default constructor to apply a set rule of that change the model configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
            <summary>
            Begins configuration of a lightweight convention that applies to all mapped types in
            the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all mapped types in
            the model that derive from or implement the specified type.
            </summary>
            <typeparam name="T"> The type of the entities that this convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
            <remarks> This method does not add new types to the model.</remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
            <summary>
            Begins configuration of a lightweight convention that applies to all properties
            in the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all primitive
            properties of the specified type in the model.
            </summary>
            <typeparam name="T"> The type of the properties that the convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
            <remarks>
            The convention will apply to both nullable and non-nullable properties of the
            specified type.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
            <summary>
            Constructs a convention that will create column annotations with the given name and
            using the given factory delegate.
            </summary>
            <param name="annotationName">The name of the annotations to create.</param>
            <param name="annotationFactory">A factory for creating the annotation on each column.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
            <summary>
            A general purpose class for Code First conventions that read attributes from .NET types
            and generate table annotations based on those attributes.
            </summary>
            <typeparam name="TAttribute">The type of attribute to discover.</typeparam>
            <typeparam name="TAnnotation">The type of annotation that will be created.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
            <summary>
            Constructs a convention that will create table annotations with the given name and
            using the given factory delegate.
            </summary>
            <param name="annotationName">The name of the annotations to create.</param>
            <param name="annotationFactory">A factory for creating the annotation on each table.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
            <summary>
            A convention for discovering <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> attributes on properties and generating
            <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> column annotations in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
            <summary>
            Constructs a new instance of the convention.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found on primitive properties in the model.
            </summary>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
            <summary>
            Applies this convention to a property that has an attribute of type TAttribute applied.
            </summary>
            <param name="configuration">The configuration for the property that has the attribute.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found on properties of types in the model.
            </summary>
            <remarks>
            Note that the derived convention will be applied for any non-static property on the mapped type that has
            the specified attribute, even if it wasn't included in the model.
            </remarks>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
            <summary>
            Applies this convention to a property that has an attribute of type TAttribute applied.
            </summary>
            <param name="memberInfo">The member info for the property that has the attribute.</param>
            <param name="configuration">The configuration for the class that contains the property.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found in the model.
            </summary>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
            <summary>
            Applies this convention to a class that has an attribute of type TAttribute applied.
            </summary>
            <param name="configuration">The configuration for the class that contains the property.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
            <summary>
            Used to configure a property in a mapping fragment.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property, in a mapping fragment.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same PropertyMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same PropertyMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
            <summary>
                Convention to introduce indexes for foreign keys.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
            <summary>
            A convention that operates on the database section of the model after the model is created.
            </summary>
            <typeparam name="T">The type of metadata item that this convention operates on.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Applies this convention to an item in the model.
            </summary>
            <param name="item">The item to apply the convention to.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
            <summary>
            A convention that operates on the conceptual section of the model after the model is created.
            </summary>
            <typeparam name="T">The type of metadata item that this convention operates on.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Applies this convention to an item in the model.
            </summary>
            <param name="item">The item to apply the convention to.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:System.Data.Entity.QueryableExtensions">
            <summary>
            Useful extension methods for use with Entity Framework LINQ queries.
            </summary>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable`1"/> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable`1"/> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> and <see cref="T:System.Data.Entity.DbSet`1"/> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable`1"/>. Other instances of <see cref="T:System.Linq.IQueryable`1"/>
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable`1"/> to specify multiple paths for the query.
            </remarks>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <param name="source">
            The source <see cref="T:System.Linq.IQueryable`1"/> on which to call Include.
            </param>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new <see cref="T:System.Linq.IQueryable`1"/> with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable"/> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable"/> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery"/>, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> and <see cref="T:System.Data.Entity.DbSet"/> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable"/>. Other instances of <see cref="T:System.Linq.IQueryable"/>
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable"/> to specify multiple paths for the query.
            </remarks>
            <param name="source">
            The source <see cref="T:System.Linq.IQueryable"/> on which to call Include.
            </param>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new <see cref="T:System.Linq.IQueryable"/> with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            The path expression must be composed of simple property access expressions together with calls to Select for
            composing additional includes after including a collection proprty.  Examples of possible include paths are:
            To include a single reference: query.Include(e => e.Level1Reference)
            To include a single collection: query.Include(e => e.Level1Collection)
            To include a reference and then a reference one level down: query.Include(e => e.Level1Reference.Level2Reference)
            To include a reference and then a collection one level down: query.Include(e => e.Level1Reference.Level2Collection)
            To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))
            To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))
            To include a collection, a reference, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference.Level3Reference))
            To include a collection, a collection, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection.Select(l2 => l2.Level3Reference)))
            This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.
            If the source IQueryable does not have a matching method, then this method does nothing.
            The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.
            When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other
            instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the
            query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.
            </remarks>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <typeparam name="TProperty"> The type of navigation property being included. </typeparam>
            <param name="source"> The source IQueryable on which to call Include. </param>
            <param name="path"> A lambda expression representing the path to include. </param>
            <returns>
            A new IQueryable&lt;T&gt; with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <typeparam name="T"> The element type. </typeparam>
            <param name="source"> The source query. </param>
            <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <param name="source"> The source query. </param>
            <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to apply AsStreaming to.
            </param>
            <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
            <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to apply AsStreaming to.
            </param>
            <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
            <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source"> The source query. </param>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
            <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source"> The source query. </param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source"> The source query. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
            <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
            <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Linq.IQueryable"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Linq.IQueryable"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a list from.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create an array from.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create an array from.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type
            <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type
            <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type
            <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Linq.IQueryable`1"/> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type
            <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> doesn't implement <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source"/> that passes the test in
            <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source"/> that passes the test in
            <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource"/> ) if
            <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource"/> ) if
            <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource"/> ) if <paramref name="source"/>
            is empty or if no element passes the test specified by <paramref name="predicate"/> ; otherwise, the first
            element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource"/> ) if <paramref name="source"/>
            is empty or if no element passes the test specified by <paramref name="predicate"/> ; otherwise, the first
            element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            has more than one element.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            has more than one element.
            </exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name="TSource"/>)
            if the sequence contains no elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            has more than one element.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name="TSource"/>)
            if the sequence contains no elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            has more than one element.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate"/>, or <c>default</c> ( <typeparamref name="TSource"/> ) if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate"/>, or <c>default</c> ( <typeparamref name="TSource"/> ) if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
            <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="item"> The object to locate in the sequence. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to return the single element of.
            </param>
            <param name="item"> The object to locate in the sequence. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to check for being empty.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to check for being empty.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the total number of elements in a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the total number of elements in a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns an <see cref="T:System.Int64"/> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="predicate"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the minimum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the minimum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the minimum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the minimum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the maximum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the maximum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the maximum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector"/> .
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to determine the maximum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains  the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Decimal.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int32.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Int64.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Decimal.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Decimal.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Decimal.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal"/> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source">
            A sequence of values of type <typeparamref name="TSource"/> .
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            or
            <paramref name="selector"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source"/>
            is larger than
            <see cref="F:System.Decimal.MaxValue"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the average of.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the average of.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>
            is
            <c>null</c>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider"/>
            .
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/>
            contains no elements.
            </exception>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
            A sequence of nullable <